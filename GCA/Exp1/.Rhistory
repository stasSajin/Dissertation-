library(ggplot2)
library(lme4)
library(lmerTest)
library(dplyr)
library(parallel)
library(doParallel)
library(tidyr)
library(gridExtra)
EyeData <- read.csv("Exp1DriftCorrected.csv", na.strings = c("."))[,c('RECORDING_SESSION_LABEL', 'IA_FIRST_RUN_START_TIME', 'IA_FIRST_RUN_START_TIME', 'IA_FIRST_RUN_END_TIME', 'IA_SECOND_RUN_START_TIME', 'IA_SECOND_RUN_END_TIME', 'IA_THIRD_RUN_START_TIME', 'IA_THIRD_RUN_END_TIME', 'IA_LABEL', 'RESPONSE_ACC', 'IA_DWELL_TIME', 'TRIAL_INDEX', 'target', 'RESPONSE_RT', 'trialtype','Bilingual')]
EyeData[is.na(EyeData)] <- 0
#check the dimentions of the dataset
dim(EyeData)
#rename the RECORDING_SESSION_LABEL into Subject
colnames(EyeData)[1] <- "Subject"
#examine colum names
names(EyeData)
EyeData <- subset(EyeData, EyeData$trialtype!="Practice")
SubjectAccuracy<- EyeData %>% group_by(Subject) %>%
summarise(MeanAccuracy=mean(RESPONSE_ACC)) %>% arrange(MeanAccuracy)
SubjectAccuracy
SubjectRT<- EyeData %>% group_by(Subject) %>%
summarise(MeanRT=mean(RESPONSE_RT)) %>% arrange(MeanRT)
SubjectRT
CorrectEyeData<-EyeData %>% filter(RESPONSE_ACC==1)
CorrectEyeData$Fststart <- ifelse(as.numeric(as.character(CorrectEyeData$IA_FIRST_RUN_START_TIME)) > 0, as.numeric(as.character(CorrectEyeData$IA_FIRST_RUN_START_TIME)), 0)
CorrectEyeData$Fstend <- ifelse(as.numeric(as.character(CorrectEyeData$IA_FIRST_RUN_START_TIME)) > 0, as.numeric(as.character(CorrectEyeData$IA_FIRST_RUN_END_TIME)), 0)
CorrectEyeData$Secstart <- ifelse(as.numeric(as.character(CorrectEyeData$IA_SECOND_RUN_START_TIME)) > 0, as.numeric(as.character(CorrectEyeData$IA_SECOND_RUN_START_TIME)), 0)
CorrectEyeData$Secend <- ifelse(as.numeric(as.character(CorrectEyeData$IA_SECOND_RUN_START_TIME)) > 0, as.numeric(as.character(CorrectEyeData$IA_SECOND_RUN_END_TIME)), 0)
CorrectEyeData$Thirdstart <- ifelse(as.numeric(as.character(CorrectEyeData$IA_THIRD_RUN_START_TIME)) > 0, as.numeric(as.character(CorrectEyeData$IA_THIRD_RUN_START_TIME)), 0)
CorrectEyeData$Thirdend <- ifelse(as.numeric(as.character(CorrectEyeData$IA_THIRD_RUN_START_TIME)) > 0, as.numeric(as.character(CorrectEyeData$IA_THIRD_RUN_END_TIME)), 0)
time <- seq(0, 6000, by=25)
tmatrix <- matrix(nrow=nrow(CorrectEyeData), ncol=length(time))
registerDoParallel(3)
for(i in 1:nrow(tmatrix)) {
for(j in 1:length(time)) {
tmatrix[i,j] <-  ifelse(CorrectEyeData$Fststart[i] < time[j] &
CorrectEyeData$Fstend[i] > time[j] |CorrectEyeData$Secstart[i] <
time[j] & CorrectEyeData$Secend[i] > time[j] | CorrectEyeData$Thirdstart[i]
< time[j] & CorrectEyeData$Thirdend[i]>time[j], 1,0)
}
}
CleanData <- cbind(CorrectEyeData, data.frame(tmatrix))
colnames(CleanData)
colnames(CleanData)[23:263] <- seq(0, 6000, by=25)
colnames(CleanData)
CleanData <- CleanData[, -c(2:8,10,11,17:22)]
colnames(CleanData)
rm(tmatrix,EyeData,CorrectEyeData,i,j)
CleanData<- CleanData %>% gather(time,value,8:248)
#find proportion for each interest area for each subject
CleanDataProb<-CleanData %>% group_by(Subject,Bilingual,IA_LABEL,trialtype,time) %>%
summarise(Prob=mean(value))
CleanDataProb$time<-as.numeric(as.character(CleanDataProb$time))
t25 <- data.frame(poly(unique(CleanDataProb$time),4))
t25$time <- seq(0, 6000, by=25)
CleanDataProb <- merge(CleanDataProb , t25, by="time")
head(CleanDataProb)
str(CleanDataProb)
OnlySubjects<-CleanData %>% group_by(IA_LABEL,trialtype,time) %>%
summarise(n=n(),Prob=mean(value),sd=sd(value)) %>%
mutate(se=sd/sqrt(n), LCI=Prob+qnorm(0.025)*se, UCI=Prob+qnorm(0.975)*se)
OnlySubjects$time<-as.numeric(as.character(OnlySubjects$time))
g1<-ggplot(OnlySubjects, aes(x=time, y=Prob, shape=IA_LABEL, color=IA_LABEL)) +
geom_point() +
geom_errorbar(aes(ymin=LCI, ymax=UCI)) + facet_grid(.~trialtype)+
scale_x_continuous(limits = c(0, 6000))+
geom_vline(xintercept = 3082)+
geom_vline(xintercept = 3750)+theme_bw()
g2<-ggplot(OnlySubjects, aes(x=time, y=Prob, shape=IA_LABEL, color=IA_LABEL)) +
geom_point() +
geom_errorbar(aes(ymin=LCI, ymax=UCI)) + facet_grid(.~trialtype)+
scale_x_continuous(limits = c(1000+1000+682+200+200, 3750))+theme_bw()
grid.arrange(g1, g2, nrow=2, ncol=1, top="Fixation Proportion for each trial type")
OnlySubjectsB<-CleanData %>% group_by(Bilingual,IA_LABEL,trialtype,time) %>%
summarise(n=n(),Prob=mean(value),sd=sd(value)) %>%
mutate(se=sd/sqrt(n), LCI=Prob+qnorm(0.025)*se, UCI=Prob+qnorm(0.975)*se)
OnlySubjectsB$time<-as.numeric(as.character(OnlySubjectsB$time))
ggplot(OnlySubjectsB, aes(x=time, y=Prob, shape=IA_LABEL, color=IA_LABEL)) +
geom_point() +
geom_errorbar(aes(ymin=LCI, ymax=UCI)) + facet_grid(.~trialtype)+
scale_x_continuous(limits = c(0, 6000))+
geom_vline(xintercept = 3082)+
geom_vline(xintercept = 3750)+theme_bw()
model<-CleanDataProb %>%
filter(trialtype=="Experimental", IA_LABEL=="COMPET_IA " | IA_LABEL=="TARGET_IA ",
time>=3082 & time <=4000)
model$IA_LABEL<-as.factor(as.character(model$IA_LABEL))
Model1<-lmer(Prob ~ IA_LABEL +
(1| Subject) +
(1| Subject:IA_LABEL),
data=model, REML=T)
#linear; model 2
Model2<-lmer(Prob ~ IA_LABEL*X1 +
(1+X1| Subject) +
(1+X1| Subject:IA_LABEL),
data=model, REML=T)
#linea+quadratic; model 3
Model3<-lmer(Prob ~ IA_LABEL*(X1+X2) +
(1+X1+X2| Subject) +
(1+X1+X2| Subject:IA_LABEL),
data=model, REML=T)
#Model 4
Model4<-lmer(Prob ~ IA_LABEL*(X1+X2) +
(1+X1| Subject) +
(1+X1| Subject:IA_LABEL),
data=model, REML=T)
#Model 5
Model5<-lmer(Prob ~ IA_LABEL*(X1+X2+X3) +
(1+X1| Subject) +
(1+X1| Subject:IA_LABEL),
data=model, REML=T)
#Model 6
Model6<-lmer(Prob ~ IA_LABEL*(X1+X2+X3+X4) +
(1+X1| Subject) +
(1+X1| Subject:IA_LABEL),
data=model, REML=T)
#compare the models based on ANOVA test
anova(Model1,Model2,Model3,Model4,Model5,Model6)
#compare the models based on R^2 based on a paper from Xu (http://onlinelibrary.wiley.com/doi/10.1002/sim.1572/abstract)
1-var(residuals(Model1))/(var(model.response(model.frame(Model1))))
1-var(residuals(Model2))/(var(model.response(model.frame(Model2))))
1-var(residuals(Model3))/(var(model.response(model.frame(Model3))))
1-var(residuals(Model4))/(var(model.response(model.frame(Model4))))
1-var(residuals(Model5))/(var(model.response(model.frame(Model5))))
1-var(residuals(Model6))/(var(model.response(model.frame(Model6))))
#find the summary for model 6
summary(Model6)
fitted(Model6)
sqrt(mean((model$Prob-fitted(Model6))^2))
LmerPreductions<-predict(Model6, model[,-model$Prob])
sqrt(mean((model$Prob-LmerPreductions)^2))
sqrt(mean((model$Prob-fitted(Model6))^2))
modelFit<-train(Prob~(X1+X2+X3+X4)*IA_LABEL, method="rf", data=model,
trControl = trainControl(method = "cv", number = 4),
ntree = 200, importance = TRUE)
library(caret)
modelFit<-train(Prob~(X1+X2+X3+X4)*IA_LABEL, method="rf", data=model,
trControl = trainControl(method = "cv", number = 4),
ntree = 200, importance = TRUE)
modelFit$finalModel
modelFit$finalModel$importance
modelFit<-train(Prob~(X1+X2+X3+X4)*IA_LABEL+Subject, method="rf", data=model,
trControl = trainControl(method = "cv", number = 4),
ntree = 200, importance = TRUE)
modelFit$finalModel
modelFit$finalModel$importance
modelFit<-train(Prob~(X1+X2+X3+X4)*IA_LABEL+Subject, method="rf", data=model,
trControl = trainControl(method = "repeatedcv", repeats = 5, allowParallel = TRUE),
ntree = 200, importance = TRUE)
modelFit$finalModel
modelFit
modelFit$finalModel$importance
plot(modelFit, scales = list(x = list(log = 2)))
predicted<-predict(modelFit$finalModel, model[,-model$Prob])
RMSERandomForest<-sqrt(mean((model$Prob-modelFit$finalModel$predicted)^2))
RMSERandomForest
1-var(residuals(Model6))/(var(model.response(model.frame(Model6))))
sqrt(mean((model$Prob-fitted(Model6))^2))
1-var(residuals(Model2))/(var(model.response(model.frame(Model2))))
varImpPlot(modelFit$finalModel)
modelFit<-train(Prob~(X1)*IA_LABEL+Subject, method="rf", data=model,
trControl = trainControl(method = "repeatedcv", repeats = 5, allowParallel = TRUE),
ntree = 200, importance = TRUE)
modelFit<-train(Prob~(X1)*IA_LABEL+Subject, method="rf", data=model,
trControl = trainControl(method = "cv", number = 4, allowParallel = TRUE),
ntree = 200, importance = TRUE)
modelFit<-train(Prob~(X1)*IA_LABEL+Subject, method="rf", data=model,
trControl = trainControl(method = "cv", number = 4),
ntree = 200, importance = TRUE)
modelFit$finalModel
plot(modelFit, scales = list(x = list(log = 2)))
varImpPlot(modelFit$finalModel)
modelFit<-train(Prob~(X1+X2+X3+X4)*IA_LABEL+Subject, method="rf", data=model,
trControl = trainControl(method = "cv", number = 4),
ntree = 200, importance = TRUE)
modelRF1<-train(Prob~(X1+X2+X3+X4)*IA_LABEL+Subject, method="rf", data=model,
trControl = trainControl(method = "cv", number = 4),
ntree = 200, importance = TRUE)
modelRF1<-train(Prob~(X1+X2+X3+X4)*IA_LABEL+Subject, method="rf", data=model,
trControl = trainControl(method = "cv", number = 5),
ntree = 200, importance = TRUE)
modelRF2<-train(Prob~(X1)*IA_LABEL+Subject, method="rf", data=model,
trControl = trainControl(method = "cv", number = 5),
ntree = 200, importance = TRUE)
#Examine Model Ouput
modelRF2
#Examine the best model
modelRF2$finalModel
#Examine Variable Importance
modelRF2$finalModel$importance
varImpPlot(modelRF2$finalModel)
#Examine RMSE
RMSERandomForest<-sqrt(mean((model$Prob-modelRF2$finalModel$predicted)^2))
modelRF2<-train(Prob~(X1)*IA_LABEL+Subject, method="rf", data=model,
trControl = trainControl(method = "cv", number = 5),
ntree = 200, importance = TRUE)
modelRF2<-train(Prob~(X1)*IA_LABEL+Subject, method="rf", data=model,
trControl = trainControl(method = "cv", number = 4),
ntree = 200, importance = TRUE)
modelRF2<-train(Prob~(X1)*IA_LABEL+Subject, method="rf", data=model,
trControl = trainControl(method = "cv", number = 5),
ntree = 200, importance = TRUE)
modelRF1<-train(Prob~(X1+X2+X3+X4)*IA_LABEL+Subject, method="rf", data=model,
trControl = trainControl(method = "cv", number = 5),
ntree = 200, importance = TRUE)
set.seed(123)
modelRF1<-train(Prob~(X1+X2+X3+X4)*IA_LABEL+Subject, method="rf", data=model,
trControl = trainControl(method = "cv", number = 5),
ntree = 200, importance = TRUE)
set.seed(123)
modelRF2<-train(Prob~(X1)*IA_LABEL+Subject, method="rf", data=model,
trControl = trainControl(method = "cv", number = 5),
ntree = 200, importance = TRUE)
modelRF2<-train(Prob~(X1)*IA_LABEL+Subject, method="rf", data=model,
trControl = trainControl(method = "cv", number = 5),
ntree = 200, importance = TRUE)
modelRF2<-train(Prob~(X1)*IA_LABEL+Subject, method="rf", data=model,
trControl = trainControl(method = "cv", number = 5),
ntree = 200, importance = TRUE)
modelRF2
modelRF2$finalModel
modelRF2$finalModel$importance
varImpPlot(modelRF2$finalModel)
sqrt(mean((model$Prob-modelRF2$finalModel$predicted)^2))
1-var(residuals(Model2))/(var(model.response(model.frame(Model2))))
summary(Model2)
withFitted<-cbind(model,fitted(Model6))
withFitted
colnames(withFitted)
ggplot(withFitted, aes(x=time, y=fitted(Model6), shape=IA_LABEL, color=IA_LABEL)) +
geom_point() +
ggplot(withFitted, aes(x=time, y=fitted(Model6), shape=IA_LABEL, color=IA_LABEL)) +
geom_point()
ggplot(withFitted, aes(x=time, y=fitted(Model6), shape=IA_LABEL, color=IA_LABEL)) +
geom_point()
View(model)
withFitted %>% group_by(time,IA_LABEL,trialtype) %>% summarise(meanReal=mean(Prob), meanPredicted=mean(fitted(Model6)))
ggplot(withFitted, aes(x=time, y=fitted(Model6), shape=IA_LABEL, color=IA_LABEL)) +
geom_point()
withFitted %>% group_by(time,IA_LABEL) %>% summarise(meanReal=mean(Prob), meanPredicted=mean(fitted(Model6)))
withFitted1<-withFitted %>% group_by(time,IA_LABEL) %>% summarise(meanReal=mean(Prob), meanPredicted=mean(fitted(Model6)))
ggplot(withFitted1, aes(x=time, y=fitted(Model6), shape=IA_LABEL, color=IA_LABEL)) +
geom_point()
ggplot(withFitted1, aes(x=time, y=meanPredicted, shape=IA_LABEL, color=IA_LABEL)) +
geom_point()
ggplot(withFitted1, aes(x=time, y=meanPredicted, shape=IA_LABEL, color=IA_LABEL)) +
geom_point()
withFitted1
ggplot(withFitted1, aes(x=time, y=meanReal, shape=IA_LABEL, color=IA_LABEL)) +
geom_point()
View(withFitted)
fitted(Model6)
mean(fitted(Model6))
withFitted1<-withFitted %>% group_by(time,IA_LABEL) %>%
summarise(meanPredicted=mean(fitted(Model6)))
ggplot(withFitted1, aes(x=time, y=meanPredicted, shape=IA_LABEL, color=IA_LABEL)) +
geom_point()
withFitted
View(withFitted)
withFitted1<-withFitted %>% group_by(Subject,time,IA_LABEL) %>%
summarise(meanPredicted=mean(fitted(Model6)))
ggplot(withFitted1, aes(x=time, y=meanPredicted, shape=IA_LABEL, color=IA_LABEL)) +
geom_point()
ggplot(withFitted1, aes(x=time, y=meanPredicted, shape=IA_LABEL, color=IA_LABEL)) +
geom_point()
withFitted1
ggplot(withFitted, aes(x=time, y=fitted(Model6), shape=IA_LABEL, color=IA_LABEL)) +
geom_point()
str(withFitted)
withFitted<-cbind(model[,c(1,2,4,6)],fitted(Model6))
str(withFitted)
ggplot(withFitted, aes(x=time, y=fitted(Model6), shape=IA_LABEL, color=IA_LABEL)) +
geom_point()
withFitted %>% group_by(IA_LABEL,time) %>% summarise(meanPredicted=mean(fitted(Model6)))
withFitted %>% group_by(time,IA_LABEL) %>% summarise(meanPredicted=mean(fitted(Model6)))
fitted(Model6)
model<-fitted(model6)
model$fitted<-fitted(Model6)
ggplot(model, aes(x=time, y=fitted, shape=IA_LABEL, color=IA_LABEL)) +
geom_point()
as.numeric(model$Subject)
model$Subject<-as.numeric(model$Subject)
ggplot(model, aes(x=time, y=fitted, shape=IA_LABEL, color=IA_LABEL)) +
geom_point()
str(model$fitted)
class(model$fitted)
ddply(model, c("Subject","IA_LABEL"), summarise, Mean=mean(fitted))
library("reshape2", lib.loc="C:/Program Files/R/R-3.2.1-RPO/library")
ddply(model, c("Subject","IA_LABEL"), summarise, Mean=mean(fitted))
library("reshape", lib.loc="C:/Program Files/R/R-3.2.1-RPO/library")
ddply(model, c("Subject","IA_LABEL"), summarise, Mean=mean(fitted))
library("plyr", lib.loc="C:/Program Files/R/R-3.2.1-RPO/library")
ddply(model, c("Subject","IA_LABEL"), summarise, Mean=mean(fitted))
ddply(model, c("time"","Subject","IA_LABEL"), summarise, Mean=mean(fitted))
ddply(model, c("time","Subject","IA_LABEL"), summarise, Mean=mean(fitted))
dataF<-ddply(model, c("time","Subject","IA_LABEL"), summarise, Mean=mean(fitted))
names(dataF)
ggplot(dataF, aes(x=time, y=fitted, shape=IA_LABEL, color=IA_LABEL)) +
geom_point()
ggplot(dataF, aes(x=time, y=fitted, shape=IA_LABEL, color=IA_LABEL)) +
geom_point()
str(dataF)
ggplot(dataF, aes(x=time, y=fitted, shape=IA_LABEL, color=IA_LABEL)) +
geom_point()
dataF<-ddply(model, c("time","IA_LABEL"), summarise, Mean=mean(fitted))
ggplot(dataF, aes(x=time, y=fitted, shape=IA_LABEL, color=IA_LABEL)) +
geom_point()
View(dataF)
ggplot(dataF, aes(x=time, y=Mean, shape=IA_LABEL, color=IA_LABEL)) +
geom_point()
model$fitted<-fitted(Model6)
model$Subject<-as.numeric(model$Subject)
dataF<-ddply(model, c("time","IA_LABEL"), summarise, Mean=mean(fitted))
str(dataF)
str(model)
View(CleanDataProb)
View(model)
View(model)
plot(x=time, y=X1, data=model)
plot(x=time~y=X1, data=model)
plot(time~X1, data=model)
plot(time~X2, data=model)
plot(time~X3, data=model)
plot(time~X2, data=model)
plot(X1~time, data=model)
plot(X2~time, data=model)
plot(X3~time, data=model)
plot(X3~time, data=CleanDataProb)
plot(X1~time, data=CleanDataProb)
plot(X2~time, data=CleanDataProb)
plot(X3~time, data=CleanDataProb)
plot(X4~time, data=CleanDataProb)
model<-CleanDataProb %>%
filter(trialtype=="Experimental", IA_LABEL=="COMPET_IA " | IA_LABEL=="TARGET_IA ",
time>=3082 & time <=4000)
model$IA_LABEL<-as.factor(as.character(model$IA_LABEL))
t25 <- data.frame(poly(unique(model$time),4))
t25$time <- seq(3100, 4000, by=25)
CleanDataProb <- merge(CleanDataProb , t25, by="time")
model <- merge(model , t25, by="time")
head(model)
str(model)
model<-CleanDataProb %>%
filter(trialtype=="Experimental", IA_LABEL=="COMPET_IA " | IA_LABEL=="TARGET_IA ",
time>=3082 & time <=4000)
model$IA_LABEL<-as.factor(as.character(model$IA_LABEL))
t25 <- data.frame(poly(unique(model$time),4))
t25$time <- seq(3100, 4000, by=25)
model <- merge(model , t25, by="time")
head(model)
str(model)
CleanDataProb<-CleanData %>% group_by(Subject,Bilingual,IA_LABEL,trialtype,time) %>%
summarise(Prob=mean(value))
CleanDataProb$time<-as.numeric(as.character(CleanDataProb$time))
CleanData <- CleanData[, -c(2:8,10,11,17:22)]
colnames(CleanData)
rm(tmatrix,EyeData,CorrectEyeData,i,j)
CleanData <- cbind(CorrectEyeData, data.frame(tmatrix))
colnames(CleanData)
EyeData <- read.csv("Exp1DriftCorrected.csv", na.strings = c("."))[,c('RECORDING_SESSION_LABEL', 'IA_FIRST_RUN_START_TIME', 'IA_FIRST_RUN_START_TIME', 'IA_FIRST_RUN_END_TIME', 'IA_SECOND_RUN_START_TIME', 'IA_SECOND_RUN_END_TIME', 'IA_THIRD_RUN_START_TIME', 'IA_THIRD_RUN_END_TIME', 'IA_LABEL', 'RESPONSE_ACC', 'IA_DWELL_TIME', 'TRIAL_INDEX', 'target', 'RESPONSE_RT', 'trialtype','Bilingual')]
#change all the NAs to zeros
EyeData[is.na(EyeData)] <- 0
#check the dimentions of the dataset
dim(EyeData)
#rename the RECORDING_SESSION_LABEL into Subject
colnames(EyeData)[1] <- "Subject"
#examine colum names
names(EyeData)
str(EyeData)
EyeData <- subset(EyeData, EyeData$trialtype!="Practice")
SubjectAccuracy<- EyeData %>% group_by(Subject) %>%
summarise(MeanAccuracy=mean(RESPONSE_ACC)) %>% arrange(MeanAccuracy)
SubjectAccuracy
SubjectRT<- EyeData %>% group_by(Subject) %>%
summarise(MeanRT=mean(RESPONSE_RT)) %>% arrange(MeanRT)
SubjectRT
CorrectEyeData<-EyeData %>% filter(RESPONSE_ACC==1)
CorrectEyeData$Fststart <- ifelse(as.numeric(as.character(CorrectEyeData$IA_FIRST_RUN_START_TIME)) > 0, as.numeric(as.character(CorrectEyeData$IA_FIRST_RUN_START_TIME)), 0)
CorrectEyeData$Fstend <- ifelse(as.numeric(as.character(CorrectEyeData$IA_FIRST_RUN_START_TIME)) > 0, as.numeric(as.character(CorrectEyeData$IA_FIRST_RUN_END_TIME)), 0)
CorrectEyeData$Secstart <- ifelse(as.numeric(as.character(CorrectEyeData$IA_SECOND_RUN_START_TIME)) > 0, as.numeric(as.character(CorrectEyeData$IA_SECOND_RUN_START_TIME)), 0)
CorrectEyeData$Secend <- ifelse(as.numeric(as.character(CorrectEyeData$IA_SECOND_RUN_START_TIME)) > 0, as.numeric(as.character(CorrectEyeData$IA_SECOND_RUN_END_TIME)), 0)
CorrectEyeData$Thirdstart <- ifelse(as.numeric(as.character(CorrectEyeData$IA_THIRD_RUN_START_TIME)) > 0, as.numeric(as.character(CorrectEyeData$IA_THIRD_RUN_START_TIME)), 0)
CorrectEyeData$Thirdend <- ifelse(as.numeric(as.character(CorrectEyeData$IA_THIRD_RUN_START_TIME)) > 0, as.numeric(as.character(CorrectEyeData$IA_THIRD_RUN_END_TIME)), 0)
```
time <- seq(0, 6000, by=25)
tmatrix <- matrix(nrow=nrow(CorrectEyeData), ncol=length(time))
dim(tmatrix)
registerDoParallel(3)
for(i in 1:nrow(tmatrix)) {
for(j in 1:length(time)) {
tmatrix[i,j] <-  ifelse(CorrectEyeData$Fststart[i] < time[j] &
CorrectEyeData$Fstend[i] > time[j] |CorrectEyeData$Secstart[i] <
time[j] & CorrectEyeData$Secend[i] > time[j] | CorrectEyeData$Thirdstart[i]
< time[j] & CorrectEyeData$Thirdend[i]>time[j], 1,0)
}
}
CleanData <- cbind(CorrectEyeData, data.frame(tmatrix))
colnames(CleanData)
colnames(CleanData)[23:263] <- seq(0, 6000, by=25)
colnames(CleanData)
CleanData <- CleanData[, -c(2:8,10,11,17:22)]
colnames(CleanData)
rm(tmatrix,EyeData,CorrectEyeData,i,j)
CleanData<- CleanData %>% gather(time,value,8:248)
#find proportion for each interest area for each subject
CleanDataProb<-CleanData %>% group_by(Subject,Bilingual,IA_LABEL,trialtype,time) %>%
summarise(Prob=mean(value))
CleanDataProb$time<-as.numeric(as.character(CleanDataProb$time))
CleanDataProb$time<-as.numeric(as.character(CleanDataProb$time))
View(CleanData)
CleanData <- cbind(CorrectEyeData, data.frame(tmatrix))
EyeData <- read.csv("Exp1DriftCorrected.csv", na.strings = c("."))[,c('RECORDING_SESSION_LABEL', 'IA_FIRST_RUN_START_TIME', 'IA_FIRST_RUN_START_TIME', 'IA_FIRST_RUN_END_TIME', 'IA_SECOND_RUN_START_TIME', 'IA_SECOND_RUN_END_TIME', 'IA_THIRD_RUN_START_TIME', 'IA_THIRD_RUN_END_TIME', 'IA_LABEL', 'RESPONSE_ACC', 'IA_DWELL_TIME', 'TRIAL_INDEX', 'target', 'RESPONSE_RT', 'trialtype','Bilingual')]
#change all the NAs to zeros
EyeData[is.na(EyeData)] <- 0
#check the dimentions of the dataset
dim(EyeData)
#rename the RECORDING_SESSION_LABEL into Subject
colnames(EyeData)[1] <- "Subject"
#examine colum names
names(EyeData)
```
Examine the structure of the dataframe
```{r}
str(EyeData)
```
Everything looks fine.
##*Data Cleaning and PreProcessing*
Remove practice trials
```{r,}
EyeData <- subset(EyeData, EyeData$trialtype!="Practice")
```
Check subject accuracy
```{r}
SubjectAccuracy<- EyeData %>% group_by(Subject) %>%
summarise(MeanAccuracy=mean(RESPONSE_ACC)) %>% arrange(MeanAccuracy)
SubjectAccuracy
SubjectRT<- EyeData %>% group_by(Subject) %>%
summarise(MeanRT=mean(RESPONSE_RT)) %>% arrange(MeanRT)
SubjectRT
```
Subject accuracy is very high. Allmost all the subjects have 100% accuracy. Only 2 participants have a few incorrect trials.
Remove trials with incorrect accuracy
```{r}
CorrectEyeData<-EyeData %>% filter(RESPONSE_ACC==1)
```
Set up the start time and the end time dummy-coding of each run in the interest area. This creates colums where if a fixation exists during a run, then the run gets 1 (exists) or if there is no fixation in the IA during a run, then the coding is 0 (not exist)
```{r}
CorrectEyeData$Fststart <- ifelse(as.numeric(as.character(CorrectEyeData$IA_FIRST_RUN_START_TIME)) > 0, as.numeric(as.character(CorrectEyeData$IA_FIRST_RUN_START_TIME)), 0)
CorrectEyeData$Fstend <- ifelse(as.numeric(as.character(CorrectEyeData$IA_FIRST_RUN_START_TIME)) > 0, as.numeric(as.character(CorrectEyeData$IA_FIRST_RUN_END_TIME)), 0)
CorrectEyeData$Secstart <- ifelse(as.numeric(as.character(CorrectEyeData$IA_SECOND_RUN_START_TIME)) > 0, as.numeric(as.character(CorrectEyeData$IA_SECOND_RUN_START_TIME)), 0)
CorrectEyeData$Secend <- ifelse(as.numeric(as.character(CorrectEyeData$IA_SECOND_RUN_START_TIME)) > 0, as.numeric(as.character(CorrectEyeData$IA_SECOND_RUN_END_TIME)), 0)
CorrectEyeData$Thirdstart <- ifelse(as.numeric(as.character(CorrectEyeData$IA_THIRD_RUN_START_TIME)) > 0, as.numeric(as.character(CorrectEyeData$IA_THIRD_RUN_START_TIME)), 0)
CorrectEyeData$Thirdend <- ifelse(as.numeric(as.character(CorrectEyeData$IA_THIRD_RUN_START_TIME)) > 0, as.numeric(as.character(CorrectEyeData$IA_THIRD_RUN_END_TIME)), 0)
```
Generate time bins from time 0 to time 6000 in 25 ms bins and assign them to the dataset
```{r}
time <- seq(0, 6000, by=25)
tmatrix <- matrix(nrow=nrow(CorrectEyeData), ncol=length(time))
dim(tmatrix)
```
Generate time vectors for each row and column for first, second, and third pass viewings
so that viewing periods receive a viewing probability value of 1
```{r}
registerDoParallel(3)
for(i in 1:nrow(tmatrix)) {
for(j in 1:length(time)) {
tmatrix[i,j] <-  ifelse(CorrectEyeData$Fststart[i] < time[j] &
CorrectEyeData$Fstend[i] > time[j] |CorrectEyeData$Secstart[i] <
time[j] & CorrectEyeData$Secend[i] > time[j] | CorrectEyeData$Thirdstart[i]
< time[j] & CorrectEyeData$Thirdend[i]>time[j], 1,0)
}
}
CleanData <- cbind(CorrectEyeData, data.frame(tmatrix))
colnames(CleanData)
colnames(CleanData)[23:263] <- seq(0, 6000, by=25)
colnames(CleanData)
CleanData <- CleanData[, -c(2:8,10,11,17:22)]
colnames(CleanData)
rm(tmatrix,EyeData,CorrectEyeData,i,j)
CleanData<- CleanData %>% gather(time,value,8:248)
View(CleanData)
colnames(CleanData)[variable] <- "time"
View(CleanData)
colnames(CleanData)[8] <- "time"
View(CleanData)
CleanDataProb<-CleanData %>% group_by(Subject,Bilingual,IA_LABEL,trialtype,time) %>%
summarise(Prob=mean(value))
CleanDataProb$time<-as.numeric(as.character(CleanDataProb$time))
View(CleanData)
