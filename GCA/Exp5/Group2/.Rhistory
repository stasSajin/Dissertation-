#Examine the best model
modelRF2$finalModel
#Examine Variable Importance
modelRF2$finalModel$importance
varImpPlot(modelRF2$finalModel)
#Examine RMSE
sqrt(mean((modelData$Prob-modelRF2$finalModel$predicted)^2))
#attached predicted values
modelData$RF2<-modelRF2$finalModel$predicted
colnames(model)
ModelLong<- model %>% gather(Model,Predictions,11:17)
levels(ModelLong$IA_LABEL) <- list(Competitor="COMPET_IA ", Target="TARGET_IA ")
levels(ModelLong$Model) <- list(`Model 1 Intercept`="Model1Fitted", `Model 2 Linear`="Model2Fitted", `Model 3 Quadratic`="Model3Fitted", `Model 4 Cubic`="Model4Fitted", `Model 5 Quartic`="Model5Fitted", `Random Forest Complex`="RF1",`Random Forest Simple`="RF2")
levels(ModelLong$Model)
colnames(ModelLong)
colnames(ModelLong)[4]<-"Interest Area"
ModelLong[,4]<-factor(ModelLong[,4])
ForGraph1<-ModelLong %>% group_by(`Interest Area`,time, Model) %>%
summarise(`Fixation Probability`=mean(Prob),Predicted=mean(Predictions))
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
ggplot(ForGraph1, aes(x=time, y=`Fixation Probability`, shape=`Interest Area`, color=`Interest Area`)) +
geom_point(size=3) + geom_line(aes(y=Predicted), size=1)+facet_wrap(~Model, nrow=2, ncol=4)+
scale_fill_manual(values=cbPalette)+scale_colour_manual(values=cbPalette)+
ggtitle("Fixation Proportion for Models\n examining Target vs. Competitor")+
theme_bw()+
scale_x_continuous(name="time 200ms from display onset(ms)")+
theme(legend.text = element_text(size = 12))+
theme(legend.title = element_text(size=12, face="bold"))+
theme(axis.title.x = element_text(face="bold", size=15), axis.text.x  = element_text(size=12))+
theme(axis.title.y = element_text(face="bold", size=15), axis.text.y  = element_text(size=12))+
theme(strip.text.x = element_text(size=12, face="bold"))+
theme(plot.title = element_text(lineheight=.8, face="bold", size=14))+
scale_y_continuous(limits = c(0, 1))
ModelLong<- modelData %>% gather(Model,Predictions,11:17)
#rename the models so that they are more clear
levels(ModelLong$Model) <- list(`Model 1 Intercept`="Model1Fitted", `Model 2 Linear`="Model2Fitted", `Model 3 Quadratic`="Model3Fitted", `Model 4 Cubic`="Model4Fitted", `Model 5 Quartic`="Model5Fitted",`Random Forest Complex`="RF1",`Random Forest Simple`="RF2")
ModelLong<- modelData %>% gather(Model,Predictions,11:17)
levels(ModelLong$Model) <- list(`Model 1 Intercept`="Model1Fitted", `Model 2 Linear`="Model2Fitted", `Model 3 Quadratic (not converged)`="Model3Fitted", `Model 4 Quadratic (not converged)`="Model4Fitted", `Model 5 Quadratic`="Model5Fitted",`Random Forest Complex`="RF1",`Random Forest Simple`="RF2")
colnames(ModelLong)[4]<-"Interest Area"
ModelLong[,4]<-factor(ModelLong[,4])
#compress the data(find the average over subjects)
ForGraph2<-ModelLong %>% group_by(`Interest Area`,time, Model) %>%
summarise(`Fixation Probability`=mean(Prob),Predicted=mean(Predictions))
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
ggplot(ForGraph2, aes(x=time, y=`Fixation Probability`, shape=`Interest Area`, color=`Interest Area`)) +
geom_point(size=3) + geom_line(aes(y=Predicted), size=1)+facet_wrap(~Model, nrow=2, ncol=4)+
scale_fill_manual(values=cbPalette)+scale_colour_manual(values=cbPalette)+
ggtitle("Fixation Proportion for Models\n examining Target vs. Competitor")+
theme_bw()+
scale_x_continuous(name="time 200ms from display onset(ms)")+
theme(legend.text = element_text(size = 12))+
theme(legend.title = element_text(size=12, face="bold"))+
theme(axis.title.x = element_text(face="bold", size=15), axis.text.x  = element_text(size=12))+
theme(axis.title.y = element_text(face="bold", size=15), axis.text.y  = element_text(size=12))+
theme(strip.text.x = element_text(size=12, face="bold"))+
theme(plot.title = element_text(lineheight=.8, face="bold", size=14))+
scale_y_continuous(limits = c(0, 1))
setwd("C:/everything/Experiments/Dissertation Proposal/Analyses/Exp5/Group2")
setwd("C:/everything/Experiments/Dissertation Proposal/Analyses/Exp5/Group2")
library(ggplot2)
library(lme4)
library(lmerTest)
library(dplyr)
library(parallel)
library(doParallel)
library(tidyr)
library(gridExtra)
library(caret)
EyeData <- read.csv("Exp5G2DriftCorrected.csv", na.strings = c("."))[,c('RECORDING_SESSION_LABEL', 'IA_FIRST_RUN_START_TIME', 'IA_FIRST_RUN_START_TIME', 'IA_FIRST_RUN_END_TIME', 'IA_SECOND_RUN_START_TIME', 'IA_SECOND_RUN_END_TIME', 'IA_THIRD_RUN_START_TIME', 'IA_THIRD_RUN_END_TIME', 'IA_LABEL', 'RESPONSE_ACC', 'IA_DWELL_TIME', 'TRIAL_INDEX', 'target', 'RESPONSE_RT', 'trialtype','Bilingual')]
#change all the NAs to zeros
EyeData[is.na(EyeData)] <- 0
#check the dimentions of the dataset
dim(EyeData)
#rename the RECORDING_SESSION_LABEL into Subject
colnames(EyeData)[1] <- "Subject"
#examine colum names
names(EyeData)
str(EyeData)
EyeData <- subset(EyeData, EyeData$trialtype!="Practice")
SubjectAccuracy<- EyeData %>% group_by(Subject) %>%
summarise(MeanAccuracy=mean(RESPONSE_ACC)) %>% arrange(MeanAccuracy)
SubjectAccuracy
mean(SubjectAccuracy$MeanAccuracy)
SubjectRT<- EyeData %>% group_by(Subject) %>%
summarise(MeanRT=mean(RESPONSE_RT)) %>% arrange(MeanRT)
SubjectRT
mean(SubjectRT$MeanRT)
CorrectEyeData<-EyeData %>% filter(RESPONSE_ACC==1)
CorrectEyeData$Fststart <- ifelse(as.numeric(as.character(CorrectEyeData$IA_FIRST_RUN_START_TIME)) > 0, as.numeric(as.character(CorrectEyeData$IA_FIRST_RUN_START_TIME)), 0)
CorrectEyeData$Fstend <- ifelse(as.numeric(as.character(CorrectEyeData$IA_FIRST_RUN_START_TIME)) > 0, as.numeric(as.character(CorrectEyeData$IA_FIRST_RUN_END_TIME)), 0)
CorrectEyeData$Secstart <- ifelse(as.numeric(as.character(CorrectEyeData$IA_SECOND_RUN_START_TIME)) > 0, as.numeric(as.character(CorrectEyeData$IA_SECOND_RUN_START_TIME)), 0)
CorrectEyeData$Secend <- ifelse(as.numeric(as.character(CorrectEyeData$IA_SECOND_RUN_START_TIME)) > 0, as.numeric(as.character(CorrectEyeData$IA_SECOND_RUN_END_TIME)), 0)
CorrectEyeData$Thirdstart <- ifelse(as.numeric(as.character(CorrectEyeData$IA_THIRD_RUN_START_TIME)) > 0, as.numeric(as.character(CorrectEyeData$IA_THIRD_RUN_START_TIME)), 0)
CorrectEyeData$Thirdend <- ifelse(as.numeric(as.character(CorrectEyeData$IA_THIRD_RUN_START_TIME)) > 0, as.numeric(as.character(CorrectEyeData$IA_THIRD_RUN_END_TIME)), 0)
time <- seq(0, 6000, by=25)
tmatrix <- matrix(nrow=nrow(CorrectEyeData), ncol=length(time))
dim(tmatrix)
registerDoParallel(3)
for(i in 1:nrow(tmatrix)) {
for(j in 1:length(time)) {
tmatrix[i,j] <-  ifelse(CorrectEyeData$Fststart[i] < time[j] &
CorrectEyeData$Fstend[i] > time[j] |CorrectEyeData$Secstart[i] <
time[j] & CorrectEyeData$Secend[i] > time[j] | CorrectEyeData$Thirdstart[i]
< time[j] & CorrectEyeData$Thirdend[i]>time[j], 1,0)
}
}
CleanData <- cbind(CorrectEyeData, data.frame(tmatrix))
colnames(CleanData)[23:263] <- seq(0, 6000, by=25)
CleanData <- CleanData[, -c(2:8,10,11,17:22)]
CleanData<- CleanData %>% gather(time,value,8:248)
#find proportion for each interest area for each subject
CleanDataProb<-CleanData %>% group_by(Subject,Bilingual,IA_LABEL,trialtype,time) %>%
summarise(Prob=mean(value))
CleanDataProb$time<-as.numeric(as.character(CleanDataProb$time))
OnlySubjects<-CleanData %>% group_by(IA_LABEL,trialtype,time) %>%
summarise(n=n(),Prob=mean(value),sd=sd(value)) %>%
mutate(se=sd/sqrt(n), LCI=Prob+qnorm(0.025)*se, UCI=Prob+qnorm(0.975)*se)
OnlySubjects$time<-as.numeric(as.character(OnlySubjects$time))
levels(OnlySubjects$IA_LABEL) <- list(Target="TARGET_IA ", Competitor="COMPET_IA ", Distractor1="UNREL1_IA ", Distractor2="UNREL2_IA ", Distractor3="UNREL3_IA ", Distractor4="UNREL4_IA ")
colnames(OnlySubjects)[1]<-"Interest Area"
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
ggplot(OnlySubjects, aes(x=time, y=Prob, shape=`Interest Area`, color=`Interest Area`)) +
geom_point(size=3) +
geom_errorbar(aes(ymin=LCI, ymax=UCI)) + facet_grid(.~trialtype)+
scale_x_continuous(limits = c(0, 6000))+
geom_vline(xintercept = 3000+682+200+200)+
geom_vline(xintercept = 5000)+theme_bw()+
scale_fill_manual(values=cbPalette)+scale_colour_manual(values=cbPalette)+
scale_x_continuous(name="time from onset of fixation cross(ms)")+
scale_y_continuous(name="Fixation Proportion")+
theme(legend.text = element_text(size = 12))+
theme(legend.title = element_text(size=12, face="bold"))+
theme(legend.title = element_text(size=12, face="bold"))+
theme(axis.title.x = element_text(face="bold", size=15), axis.text.x  = element_text(size=10))+
theme(axis.title.y = element_text(face="bold", size=15), axis.text.y  = element_text(size=10))+
theme(strip.text.x = element_text(size=12, face="bold"))+
theme(plot.title = element_text(lineheight=.8, face="bold", size=14))
ggplot(OnlySubjects, aes(x=time, y=Prob, shape=`Interest Area`, color=`Interest Area`)) +
geom_point(size=3) +
geom_errorbar(aes(ymin=LCI, ymax=UCI)) + facet_grid(.~trialtype)+
scale_x_continuous(limits = c(3000+682+200+200, 5000), name="time 200ms from spoken target onset(ms)")+
theme_bw()+
scale_fill_manual(values=cbPalette)+scale_colour_manual(values=cbPalette)+
scale_y_continuous(name="Fixation Proportion")+
theme(legend.position="none")+
theme(axis.title.x = element_text(face="bold", size=15), axis.text.x  = element_text(size=10))+
theme(axis.title.y = element_text(face="bold", size=15), axis.text.y  = element_text(size=10))+
theme(plot.title = element_text(lineheight=.8, face="bold", size=14))+
theme(strip.text.x = element_text(size=12, face="bold"))
ggplot(OnlySubjects, aes(x=time, y=Prob, shape=`Interest Area`, color=`Interest Area`)) +
geom_point(size=3) +
geom_errorbar(aes(ymin=LCI, ymax=UCI)) + facet_grid(.~trialtype)+
scale_x_continuous(limits = c(3000+682+200+100, 5000), name="time 200ms from spoken target onset(ms)")+
theme_bw()+
scale_fill_manual(values=cbPalette)+scale_colour_manual(values=cbPalette)+
scale_y_continuous(name="Fixation Proportion")+
theme(legend.position="none")+
theme(axis.title.x = element_text(face="bold", size=15), axis.text.x  = element_text(size=10))+
theme(axis.title.y = element_text(face="bold", size=15), axis.text.y  = element_text(size=10))+
theme(plot.title = element_text(lineheight=.8, face="bold", size=14))+
theme(strip.text.x = element_text(size=12, face="bold"))
ggplot(OnlySubjects, aes(x=time, y=Prob, shape=`Interest Area`, color=`Interest Area`)) +
geom_point(size=3) +
geom_errorbar(aes(ymin=LCI, ymax=UCI)) + facet_grid(.~trialtype)+
scale_x_continuous(limits = c(3000+682+200, 5000), name="time 200ms from spoken target onset(ms)")+
theme_bw()+
scale_fill_manual(values=cbPalette)+scale_colour_manual(values=cbPalette)+
scale_y_continuous(name="Fixation Proportion")+
theme(legend.position="none")+
theme(axis.title.x = element_text(face="bold", size=15), axis.text.x  = element_text(size=10))+
theme(axis.title.y = element_text(face="bold", size=15), axis.text.y  = element_text(size=10))+
theme(plot.title = element_text(lineheight=.8, face="bold", size=14))+
theme(strip.text.x = element_text(size=12, face="bold"))
ggplot(OnlySubjects, aes(x=time, y=Prob, shape=`Interest Area`, color=`Interest Area`)) +
geom_point(size=3) +
geom_errorbar(aes(ymin=LCI, ymax=UCI)) + facet_grid(.~trialtype)+
scale_x_continuous(limits = c(3000+682, 5000), name="time 200ms from spoken target onset(ms)")+
theme_bw()+
scale_fill_manual(values=cbPalette)+scale_colour_manual(values=cbPalette)+
scale_y_continuous(name="Fixation Proportion")+
theme(legend.position="none")+
theme(axis.title.x = element_text(face="bold", size=15), axis.text.x  = element_text(size=10))+
theme(axis.title.y = element_text(face="bold", size=15), axis.text.y  = element_text(size=10))+
theme(plot.title = element_text(lineheight=.8, face="bold", size=14))+
theme(strip.text.x = element_text(size=12, face="bold"))
ggplot(OnlySubjects, aes(x=time, y=Prob, shape=`Interest Area`, color=`Interest Area`)) +
geom_point(size=3) +
geom_errorbar(aes(ymin=LCI, ymax=UCI)) + facet_grid(.~trialtype)+
scale_x_continuous(limits = c(3000+682+200, 5000), name="time 200ms from spoken target onset(ms)")+
theme_bw()+
scale_fill_manual(values=cbPalette)+scale_colour_manual(values=cbPalette)+
scale_y_continuous(name="Fixation Proportion")+
theme(legend.position="none")+
theme(axis.title.x = element_text(face="bold", size=15), axis.text.x  = element_text(size=10))+
theme(axis.title.y = element_text(face="bold", size=15), axis.text.y  = element_text(size=10))+
theme(plot.title = element_text(lineheight=.8, face="bold", size=14))+
theme(strip.text.x = element_text(size=12, face="bold"))
ggplot(OnlySubjects, aes(x=time, y=Prob, shape=`Interest Area`, color=`Interest Area`)) +
geom_point(size=3) +
geom_errorbar(aes(ymin=LCI, ymax=UCI)) + facet_grid(.~trialtype)+
scale_x_continuous(limits = c(3000+682+200+100, 5000), name="time 200ms from spoken target onset(ms)")+
theme_bw()+
scale_fill_manual(values=cbPalette)+scale_colour_manual(values=cbPalette)+
scale_y_continuous(name="Fixation Proportion")+
theme(legend.position="none")+
theme(axis.title.x = element_text(face="bold", size=15), axis.text.x  = element_text(size=10))+
theme(axis.title.y = element_text(face="bold", size=15), axis.text.y  = element_text(size=10))+
theme(plot.title = element_text(lineheight=.8, face="bold", size=14))+
theme(strip.text.x = element_text(size=12, face="bold"))
OnlySubjectsB<-CleanData %>% group_by(Bilingual,IA_LABEL,trialtype,time) %>%
summarise(n=n(),Prob=mean(value),sd=sd(value)) %>%
mutate(se=sd/sqrt(n), LCI=Prob+qnorm(0.025)*se, UCI=Prob+qnorm(0.975)*se)
OnlySubjectsB$time<-as.numeric(as.character(OnlySubjectsB$time))
ggplot(OnlySubjectsB, aes(x=time, y=Prob, shape=IA_LABEL, color=IA_LABEL)) +
geom_point() +
geom_errorbar(aes(ymin=LCI, ymax=UCI)) + facet_grid(Bilingual~trialtype)+
scale_x_continuous(limits = c(3000+682+200+100, 5000))+
theme_bw()
model<-CleanDataProb %>%
filter(trialtype=="Experimental", IA_LABEL=="COMPET_IA " | IA_LABEL=="TARGET_IA ",
time>=4000 & time <=5000)
model$IA_LABEL<-as.factor(as.character(model$IA_LABEL))
t25 <- data.frame(poly(unique(model$time),4))
t25$time <- seq(4000, 5000, by=25)
model <- merge(model , t25, by="time")
head(model)
str(model)
Model1<-lmer(Prob ~ IA_LABEL +
(1| Subject) +
(1| Subject:IA_LABEL),
data=model, REML=T)
Model2<-lmer(Prob ~ IA_LABEL*X1 +
(1+X1| Subject) +
(1+X1| Subject:IA_LABEL),
data=model, REML=T)
Model3<-lmer(Prob ~ IA_LABEL*(X1+X2) +
(1+X1+X2| Subject) +
(1+X1+X2| Subject:IA_LABEL),
data=model, REML=T)
Model4<-lmer(Prob ~ IA_LABEL*(X1+X2+X3) +
(1+X1+X2+X3| Subject) +
(1+X1+X2+X3| Subject:IA_LABEL),
data=model, REML=T)
Model5<-lmer(Prob ~ IA_LABEL*(X1+X2+X3+X4) +
(1+X1+X2+X3+X4| Subject) +
(1+X1+X2+X3+X4| Subject:IA_LABEL),
data=model, REML=T)
1-var(residuals(Model1))/(var(model.response(model.frame(Model1))))
1-var(residuals(Model2))/(var(model.response(model.frame(Model2))))
1-var(residuals(Model3))/(var(model.response(model.frame(Model3))))
1-var(residuals(Model4))/(var(model.response(model.frame(Model4))))
1-var(residuals(Model5))/(var(model.response(model.frame(Model5))))
summary(Model5)
sqrt(mean((model$Prob-fitted(Model5))^2))
model$Model1Fitted<-fitted(Model1)
model$Model2Fitted<-fitted(Model2)
model$Model4Fitted<-fitted(Model4)
model$Model3Fitted<-fitted(Model3)
model$Model5Fitted<-fitted(Model5)
set.seed(123)
modelRF1<-train(Prob~(X1+X2+X3+X4)*IA_LABEL+Subject, method="rf", data=model,
trControl = trainControl(method = "cv", number = 5),
ntree = 200, importance = TRUE)
#Examine Model Ouput
modelRF1
#Examine the best model
modelRF1$finalModel
#Examine Variable Importance
modelRF1$finalModel$importance
varImpPlot(modelRF1$finalModel)
#Examine RMSE
RMSERandomForest<-sqrt(mean((model$Prob-modelRF1$finalModel$predicted)^2))
#attach the predicted values to the dataset for later graphing purposes
model$RF1<-modelRF1$finalModel$predicted
set.seed(123)
modelRF2<-train(Prob~(X1)*IA_LABEL+Subject, method="rf", data=model,
trControl = trainControl(method = "cv", number = 5),
ntree = 200, importance = TRUE)
#Examine Model Ouput
modelRF2
#Examine the best model
modelRF2$finalModel
#Examine Variable Importance
modelRF2$finalModel$importance
varImpPlot(modelRF2$finalModel)
#Examine RMSE
sqrt(mean((model$Prob-modelRF2$finalModel$predicted)^2))
#attach the predicted values to the dataset
model$RF2<-modelRF2$finalModel$predicted
levels(CleanData$IA_LABEL) <- list(Distractor="UNREL1_IA ", Distractor="UNREL2_IA ",Competitor="COMPET_IA ", Target="Target_IA ")
CleanDataProb2<-CleanData %>% group_by(Subject,Bilingual,IA_LABEL,trialtype,time) %>%
summarise(Prob=mean(value))
CleanDataProb2$time<-as.numeric(as.character(CleanDataProb2$time))
modelData<-CleanDataProb2 %>%
filter(trialtype=="Experimental", IA_LABEL=="Competitor" | IA_LABEL=="Distractor",
time>=4000 & time <=5000)
modelData$IA_LABEL<-as.factor(as.character(modelData$IA_LABEL))
t25 <- data.frame(poly(unique(modelData$time),4))
t25$time <- seq(4000, 5000, by=25)
modelData <- merge(modelData , t25, by="time")
head(modelData)
str(modelData)
Model1<-lmer(Prob ~ IA_LABEL +
(1| Subject) +
(1| Subject:IA_LABEL),
data=modelData, REML=T)
Model2<-lmer(Prob ~ IA_LABEL*X1 +
(1+X1| Subject) +
(1+X1| Subject:IA_LABEL),
data=modelData, REML=T)
Model3<-lmer(Prob ~ IA_LABEL*(X1+X2) +
(1+X1+X2| Subject) +
(1+X1+X2| Subject:IA_LABEL),
data=modelData, REML=T)
Model4<-lmer(Prob ~ IA_LABEL*(X1+X2+X3) +
(1+X1+X2+X3| Subject) +
(1+X1+X2+X3| Subject:IA_LABEL),
data=modelData, REML=T)
Model5<-lmer(Prob ~ IA_LABEL*(X1+X2+X3+X4) +
(1+X1+X2+X3+X4| Subject) +
(1+X1+X2+X3+X4| Subject:IA_LABEL),
data=modelData, REML=T)
1-var(residuals(Model1))/(var(model.response(model.frame(Model1))))
1-var(residuals(Model2))/(var(model.response(model.frame(Model2))))
1-var(residuals(Model3))/(var(model.response(model.frame(Model3))))
1-var(residuals(Model4))/(var(model.response(model.frame(Model4))))
1-var(residuals(Model5))/(var(model.response(model.frame(Model5))))
summary(Model5)
#find the RMSE
sqrt(mean((modelData$Prob-fitted(Model5))^2))
modelData$Model1Fitted<-fitted(Model1)
modelData$Model2Fitted<-fitted(Model2)
modelData$Model3Fitted<-fitted(Model3)
modelData$Model4Fitted<-fitted(Model4)
modelData$Model5Fitted<-fitted(Model5)
set.seed(123)
modelRF1<-train(Prob~(X1+X2+X3+X4)*IA_LABEL+Subject, method="rf", data=modelData,
trControl = trainControl(method = "cv", number = 5),
ntree = 200, importance = TRUE)
#Examine Model Ouput
modelRF1
#Examine the best model
modelRF1$finalModel
#Examine Variable Importance
modelRF1$finalModel$importance
varImpPlot(modelRF1$finalModel)
#Examine RMSE
RMSERandomForest<-sqrt(mean((model$Prob-modelRF1$finalModel$predicted)^2))
#attach predicted values
modelData$RF1<-modelRF1$finalModel$predicted
set.seed(123)
modelRF2<-train(Prob~(X1)*IA_LABEL+Subject, method="rf", data=modelData,
trControl = trainControl(method = "cv", number = 5),
ntree = 200, importance = TRUE)
#Examine Model Ouput
modelRF2
#Examine the best model
modelRF2$finalModel
#Examine Variable Importance
modelRF2$finalModel$importance
varImpPlot(modelRF2$finalModel)
#Examine RMSE
sqrt(mean((modelData$Prob-modelRF2$finalModel$predicted)^2))
#attached predicted values
modelData$RF2<-modelRF2$finalModel$predicted
ModelLong<- model %>% gather(Model,Predictions,11:17)
#rename the competitor and target
levels(ModelLong$IA_LABEL) <- list(Competitor="COMPET_IA ", Target="TARGET_IA ")
#rename the models so that they are more clear
levels(ModelLong$Model) <- list(`Model 1 Intercept`="Model1Fitted", `Model 2 Linear`="Model2Fitted", `Model 3 Quadratic`="Model3Fitted", `Model 4 Cubic`="Model4Fitted", `Model 5 Quartic`="Model5Fitted", `Random Forest Complex`="RF1",`Random Forest Simple`="RF2")
#rename some of the colums
colnames(ModelLong)[4]<-"Interest Area"
ModelLong[,4]<-factor(ModelLong[,4])
#compress the data(find the average over subjects)
ForGraph1<-ModelLong %>% group_by(`Interest Area`,time, Model) %>%
summarise(`Fixation Probability`=mean(Prob),Predicted=mean(Predictions))
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
ggplot(ForGraph1, aes(x=time, y=`Fixation Probability`, shape=`Interest Area`, color=`Interest Area`)) +
geom_point(size=3) + geom_line(aes(y=Predicted), size=1)+facet_wrap(~Model, nrow=2, ncol=4)+
scale_fill_manual(values=cbPalette)+scale_colour_manual(values=cbPalette)+
ggtitle("Fixation Proportion for Models\n examining Target vs. Competitor")+
theme_bw()+
scale_x_continuous(name="time 200ms from spoken target onset(ms)")+
theme(legend.text = element_text(size = 12))+
theme(legend.title = element_text(size=12, face="bold"))+
theme(axis.title.x = element_text(face="bold", size=15), axis.text.x  = element_text(size=12))+
theme(axis.title.y = element_text(face="bold", size=15), axis.text.y  = element_text(size=12))+
theme(strip.text.x = element_text(size=12, face="bold"))+
theme(plot.title = element_text(lineheight=.8, face="bold", size=14))+
scale_y_continuous(limits = c(0, 1))
dev.off()
ggplot(ForGraph1, aes(x=time, y=`Fixation Probability`, shape=`Interest Area`, color=`Interest Area`)) +
geom_point(size=3) + geom_line(aes(y=Predicted), size=1)+facet_wrap(~Model, nrow=2, ncol=4)+
scale_fill_manual(values=cbPalette)+scale_colour_manual(values=cbPalette)+
ggtitle("Fixation Proportion for Models\n examining Target vs. Competitor")+
theme_bw()+
scale_x_continuous(name="time 200ms from spoken target onset(ms)")+
theme(legend.text = element_text(size = 12))+
theme(legend.title = element_text(size=12, face="bold"))+
theme(axis.title.x = element_text(face="bold", size=15), axis.text.x  = element_text(size=12))+
theme(axis.title.y = element_text(face="bold", size=15), axis.text.y  = element_text(size=12))+
theme(strip.text.x = element_text(size=12, face="bold"))+
theme(plot.title = element_text(lineheight=.8, face="bold", size=14))+
scale_y_continuous(limits = c(0, 1))
ModelLong<- modelData %>% gather(Model,Predictions,11:17)
#rename the models so that they are more clear
levels(ModelLong$Model) <- list(`Model 1 Intercept`="Model1Fitted", `Model 2 Linear`="Model2Fitted", `Model 3 Quadratic (not converged)`="Model3Fitted", `Model 4 Quadratic (not converged)`="Model4Fitted", `Model 5 Quadratic`="Model5Fitted",`Random Forest Complex`="RF1",`Random Forest Simple`="RF2")
#rename some of the colums
colnames(ModelLong)[4]<-"Interest Area"
levels(ModelLong$Model) <- list(`Model 1 Intercept`="Model1Fitted", `Model 2 Linear`="Model2Fitted", `Model 3 Quadratic`="Model3Fitted", `Model 4 Cubic`="Model4Fitted", `Model 5 Quartic`="Model5Fitted",`Random Forest Complex`="RF1",`Random Forest Simple`="RF2")
ModelLong<- modelData %>% gather(Model,Predictions,11:17)
#rename the models so that they are more clear
levels(ModelLong$Model) <- list(`Model 1 Intercept`="Model1Fitted", `Model 2 Linear`="Model2Fitted", `Model 3 Quadratic`="Model3Fitted", `Model 4 Cubic`="Model4Fitted", `Model 5 Quartic`="Model5Fitted",`Random Forest Complex`="RF1",`Random Forest Simple`="RF2")
#rename some of the colums
colnames(ModelLong)[4]<-"Interest Area"
ModelLong[,4]<-factor(ModelLong[,4])
#compress the data(find the average over subjects)
ForGraph2<-ModelLong %>% group_by(`Interest Area`,time, Model) %>%
summarise(`Fixation Probability`=mean(Prob),Predicted=mean(Predictions))
ggplot(ForGraph2, aes(x=time, y=`Fixation Probability`, shape=`Interest Area`, color=`Interest Area`)) +
geom_point(size=3) + geom_line(aes(y=Predicted), size=1)+facet_wrap(~Model, nrow=2, ncol=4)+
scale_fill_manual(values=cbPalette)+scale_colour_manual(values=cbPalette)+
ggtitle("Fixation Proportion for Models\n examining Target vs. Competitor")+
theme_bw()+
scale_x_continuous(name="time 200ms from spoken target onset(ms)")+
theme(legend.text = element_text(size = 12))+
theme(legend.title = element_text(size=12, face="bold"))+
theme(axis.title.x = element_text(face="bold", size=15), axis.text.x  = element_text(size=12))+
theme(axis.title.y = element_text(face="bold", size=15), axis.text.y  = element_text(size=12))+
theme(strip.text.x = element_text(size=12, face="bold"))+
theme(plot.title = element_text(lineheight=.8, face="bold", size=14))+
scale_y_continuous(limits = c(0, 1))
ggplot(ForGraph1, aes(x=time, y=`Fixation Probability`, shape=`Interest Area`, color=`Interest Area`)) +
geom_point(size=3) + geom_line(aes(y=Predicted), size=1)+facet_wrap(~Model, nrow=2, ncol=4)+
scale_fill_manual(values=cbPalette)+scale_colour_manual(values=cbPalette)+
ggtitle("Fixation Proportion for Models\n examining Target vs. Competitor")+
theme_bw()+
scale_x_continuous(name="time 100ms from spoken target onset(ms)")+
theme(legend.text = element_text(size = 12))+
theme(legend.title = element_text(size=12, face="bold"))+
theme(axis.title.x = element_text(face="bold", size=15), axis.text.x  = element_text(size=12))+
theme(axis.title.y = element_text(face="bold", size=15), axis.text.y  = element_text(size=12))+
theme(strip.text.x = element_text(size=12, face="bold"))+
theme(plot.title = element_text(lineheight=.8, face="bold", size=14))+
scale_y_continuous(limits = c(0, 1))+scale_x_continuous(limits = c(4000, 5200))
ggplot(ForGraph2, aes(x=time, y=`Fixation Probability`, shape=`Interest Area`, color=`Interest Area`)) +
geom_point(size=3) + geom_line(aes(y=Predicted), size=1)+facet_wrap(~Model, nrow=2, ncol=4)+
scale_fill_manual(values=cbPalette)+scale_colour_manual(values=cbPalette)+
ggtitle("Fixation Proportion for Models\n examining Target vs. Competitor")+
theme_bw()+
scale_x_continuous(name="time 100ms from spoken target onset(ms)")+
theme(legend.text = element_text(size = 12))+
theme(legend.title = element_text(size=12, face="bold"))+
theme(axis.title.x = element_text(face="bold", size=15), axis.text.x  = element_text(size=12))+
theme(axis.title.y = element_text(face="bold", size=15), axis.text.y  = element_text(size=12))+
theme(strip.text.x = element_text(size=12, face="bold"))+
theme(plot.title = element_text(lineheight=.8, face="bold", size=14))+
scale_y_continuous(limits = c(0, 1))+scale_x_continuous(limits = c(4001, 5000))
png(filename="plot2Experiment5G2.png",width=900,height=524)
ggplot(ForGraph1, aes(x=time, y=`Fixation Probability`, shape=`Interest Area`, color=`Interest Area`)) +
geom_point(size=3) + geom_line(aes(y=Predicted), size=1)+facet_wrap(~Model, nrow=2, ncol=4)+
scale_fill_manual(values=cbPalette)+scale_colour_manual(values=cbPalette)+
ggtitle("Fixation Proportion for Models\n examining Target vs. Competitor")+
theme_bw()+
scale_x_continuous(name="time 100ms from spoken target onset(ms)")+
theme(legend.text = element_text(size = 12))+
theme(legend.title = element_text(size=12, face="bold"))+
theme(axis.title.x = element_text(face="bold", size=15), axis.text.x  = element_text(size=10))+
theme(axis.title.y = element_text(face="bold", size=15), axis.text.y  = element_text(size=10))+
theme(strip.text.x = element_text(size=12, face="bold"))+
theme(plot.title = element_text(lineheight=.8, face="bold", size=14))+
scale_y_continuous(limits = c(0, 1))
dev.off()
ggplot(ForGraph1, aes(x=time, y=`Fixation Probability`, shape=`Interest Area`, color=`Interest Area`)) +
geom_point(size=3) + geom_line(aes(y=Predicted), size=1)+facet_wrap(~Model, nrow=2, ncol=4)+
scale_fill_manual(values=cbPalette)+scale_colour_manual(values=cbPalette)+
ggtitle("Fixation Proportion for Models\n examining Target vs. Competitor")+
theme_bw()+
scale_x_continuous(name="time 100ms from spoken target onset(ms)")+
theme(legend.text = element_text(size = 12))+
theme(legend.title = element_text(size=12, face="bold"))+
theme(axis.title.x = element_text(face="bold", size=15), axis.text.x  = element_text(size=10, angle = 60))+
theme(axis.title.y = element_text(face="bold", size=15), axis.text.y  = element_text(size=10))+
theme(strip.text.x = element_text(size=12, face="bold"))+
theme(plot.title = element_text(lineheight=.8, face="bold", size=14))+
scale_y_continuous(limits = c(0, 1))
ggplot(ForGraph1, aes(x=time, y=`Fixation Probability`, shape=`Interest Area`, color=`Interest Area`)) +
geom_point(size=3) + geom_line(aes(y=Predicted), size=1)+facet_wrap(~Model, nrow=2, ncol=4)+
scale_fill_manual(values=cbPalette)+scale_colour_manual(values=cbPalette)+
ggtitle("Fixation Proportion for Models\n examining Target vs. Competitor")+
theme_bw()+
scale_x_continuous(name="time 100ms from spoken target onset(ms)")+
theme(legend.text = element_text(size = 12))+
theme(legend.title = element_text(size=12, face="bold"))+
theme(axis.title.x = element_text(face="bold", size=15), axis.text.x  = element_text(size=10, angle = 60, vjust = 0.5))+
theme(axis.title.y = element_text(face="bold", size=15), axis.text.y  = element_text(size=10))+
theme(strip.text.x = element_text(size=12, face="bold"))+
theme(plot.title = element_text(lineheight=.8, face="bold", size=14))+
scale_y_continuous(limits = c(0, 1))
ggplot(ForGraph1, aes(x=time, y=`Fixation Probability`, shape=`Interest Area`, color=`Interest Area`)) +
geom_point(size=3) + geom_line(aes(y=Predicted), size=1)+facet_wrap(~Model, nrow=2, ncol=4)+
scale_fill_manual(values=cbPalette)+scale_colour_manual(values=cbPalette)+
ggtitle("Fixation Proportion for Models\n examining Target vs. Competitor")+
theme_bw()+
scale_x_continuous(name="time 100ms from spoken target onset(ms)")+
theme(legend.text = element_text(size = 12))+
theme(legend.title = element_text(size=12, face="bold"))+
theme(axis.title.x = element_text(face="bold", size=15), axis.text.x  = element_text(size=12, angle = 60, vjust = 0.5))+
theme(axis.title.y = element_text(face="bold", size=15), axis.text.y  = element_text(size=12))+
theme(strip.text.x = element_text(size=12, face="bold"))+
theme(plot.title = element_text(lineheight=.8, face="bold", size=14))+
scale_y_continuous(limits = c(0, 1))
