(1+X1| Subject) +
(1+X1| Subject:IA_LABEL),
data=model, REML=T)
#linea+quadratic; model 3
Model3<-lmer(Prob ~ IA_LABEL*(X1+X2) +
(1+X1+X2| Subject) +
(1+X1+X2| Subject:IA_LABEL),
data=model, REML=T)
#Model 4
Model4<-lmer(Prob ~ IA_LABEL*(X1+X2+X3) +
(1+X1+X2+X3| Subject) +
(1+X1+X2+X3| Subject:IA_LABEL),
data=model, REML=T)
#Model 5
Model5<-lmer(Prob ~ IA_LABEL*(X1+X2+X3+X4) +
(1+X1+X2+X3+X4| Subject) +
(1+X1+X2+X3+X4| Subject:IA_LABEL),
data=model, REML=T)
1-var(residuals(Model1))/(var(model.response(model.frame(Model1))))
1-var(residuals(Model2))/(var(model.response(model.frame(Model2))))
1-var(residuals(Model3))/(var(model.response(model.frame(Model3))))
1-var(residuals(Model4))/(var(model.response(model.frame(Model4))))
1-var(residuals(Model5))/(var(model.response(model.frame(Model5))))
model$Model1Fitted<-fitted(Model1)
model$Model2Fitted<-fitted(Model2)
model$Model3Fitted<-fitted(Model3)
model$Model4Fitted<-fitted(Model4)
model$Model5Fitted<-fitted(Model5)
set.seed(123)
modelRF1<-train(Prob~(X1+X2+X3+X4)*IA_LABEL+Subject, method="rf", data=model,
trControl = trainControl(method = "cv", number = 5),
ntree = 200, importance = TRUE)
model$RF1<-modelRF1$finalModel$predicted
set.seed(123)
modelRF2<-train(Prob~(X1)*IA_LABEL+Subject, method="rf", data=model,
trControl = trainControl(method = "cv", number = 5),
ntree = 200, importance = TRUE)
model$RF2<-modelRF2$finalModel$predicted
levels(CleanData$IA_LABEL) <- list(Distractor="UNREL1_IA ", Distractor="UNREL2_IA ",Competitor="COMPET_IA ", Target="Target_IA ")
CleanDataProb2<-CleanData %>% group_by(Subject,Bilingual,IA_LABEL,trialtype,time) %>%
summarise(Prob=mean(value))
CleanDataProb2$time<-as.numeric(as.character(CleanDataProb2$time))
modelData<-CleanDataProb2 %>%
filter(trialtype=="Experimental", IA_LABEL=="Competitor" | IA_LABEL=="Distractor",
time>=4000 & time <=5000)
modelData$IA_LABEL<-as.factor(as.character(modelData$IA_LABEL))
t25 <- data.frame(poly(unique(modelData$time),4))
t25$time <- seq(4000, 5000, by=25)
modelData <- merge(modelData , t25, by="time")
head(modelData)
str(modelData)
Model1<-lmer(Prob ~ IA_LABEL +
(1| Subject) +
(1| Subject:IA_LABEL),
data=modelData, REML=T)
#linear; model 2
Model2<-lmer(Prob ~ IA_LABEL*X1 +
(1+X1| Subject) +
(1+X1| Subject:IA_LABEL),
data=modelData, REML=T)
#linea+quadratic; model 3
Model3<-lmer(Prob ~ IA_LABEL*(X1+X2) +
(1+X1+X2| Subject) +
(1+X1+X2| Subject:IA_LABEL),
data=modelData, REML=T)
#Model 4
Model4<-lmer(Prob ~ IA_LABEL*(X1+X2+X3) +
(1+X1+X2+X3| Subject) +
(1+X1+X2+X3| Subject:IA_LABEL),
data=modelData, REML=T)
#Model 5
Model5<-lmer(Prob ~ IA_LABEL*(X1+X2+X3+X4) +
(1+X1+X2+X3+X4| Subject) +
(1+X1+X2+X3+X4| Subject:IA_LABEL),
data=modelData, REML=T)
modelData$Model1Fitted<-fitted(Model1)
modelData$Model2Fitted<-fitted(Model2)
modelData$Model3Fitted<-fitted(Model3)
modelData$Model4Fitted<-fitted(Model4)
modelData$Model5Fitted<-fitted(Model5)
set.seed(123)
modelRF1<-train(Prob~(X1+X2+X3+X4)*IA_LABEL+Subject, method="rf", data=modelData,
trControl = trainControl(method = "cv", number = 5),
ntree = 200, importance = TRUE)
modelData$RF1<-modelRF1$finalModel$predicted
set.seed(123)
modelRF2<-train(Prob~(X1)*IA_LABEL+Subject, method="rf", data=modelData,
trControl = trainControl(method = "cv", number = 5),
ntree = 200, importance = TRUE)
modelData$RF2<-modelRF2$finalModel$predicted
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
GCAModels<-ForGraph1 %>% filter(Model!="Random Forest Complex" & Model!="Random Forest Simple")
GCAModels$time2<-GCAModels$time-4000
ggplot(GCAModels, aes(x=time2, y=`Fixation Probability`, shape=`Interest Area`, color=`Interest Area`)) +
geom_point(size=3) + geom_line(aes(y=Predicted), size=1)+facet_wrap(~Model, nrow=2, ncol=3)+
scale_fill_manual(values=cbPalette)+scale_colour_manual(values=cbPalette)+
ggtitle("Fixation Proportion for Models\n examining Target vs. Competitor")+
theme_bw()+
scale_x_continuous(name="time 200ms after target onset (ms)", breaks=seq(0,900,100), limits=c(0,900))+
theme(legend.text = element_text(size = 12))+
theme(legend.title = element_text(size=12, face="bold"))+
theme(axis.title.x = element_text(face="bold", size=15), axis.text.x  = element_text(size=12,angle=90,vjust=.5))+
theme(axis.title.y = element_text(face="bold", size=15), axis.text.y  = element_text(size=12))+
theme(strip.text.x = element_text(size=12, face="bold"))+
theme(plot.title = element_text(lineheight=.8, face="bold", size=14))
ModelLong<- model %>% gather(Model,Predictions,11:17)
#rename the competitor and target
levels(ModelLong$IA_LABEL) <- list(Competitor="COMPET_IA ", Target="TARGET_IA ")
#rename the models so that they are more clear
levels(ModelLong$Model) <- list(`Model 1 Intercept`="Model1Fitted", `Model 2 Linear`="Model2Fitted", `Model 3 Quadratic`="Model3Fitted", `Model 4 Cubic`="Model4Fitted", `Model 5 Quartic`="Model5Fitted", `Random Forest Complex`="RF1",`Random Forest Simple`="RF2")
#rename some of the colums
colnames(ModelLong)[4]<-"Interest Area"
ModelLong[,4]<-factor(ModelLong[,4])
#compress the data(find the average over subjects)
ForGraph1<-ModelLong %>% group_by(`Interest Area`,time, Model) %>%
summarise(`Fixation Probability`=mean(Prob),Predicted=mean(Predictions))
#
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
GCAModels<-ForGraph1 %>% filter(Model!="Random Forest Complex" & Model!="Random Forest Simple")
GCAModels$time2<-GCAModels$time-4000
ggplot(GCAModels, aes(x=time2, y=`Fixation Probability`, shape=`Interest Area`, color=`Interest Area`)) +
geom_point(size=3) + geom_line(aes(y=Predicted), size=1)+facet_wrap(~Model, nrow=2, ncol=3)+
scale_fill_manual(values=cbPalette)+scale_colour_manual(values=cbPalette)+
ggtitle("Fixation Proportion for Models\n examining Target vs. Competitor")+
theme_bw()+
scale_x_continuous(name="time 200ms after target onset (ms)", breaks=seq(0,900,100), limits=c(0,900))+
theme(legend.text = element_text(size = 12))+
theme(legend.title = element_text(size=12, face="bold"))+
theme(axis.title.x = element_text(face="bold", size=15), axis.text.x  = element_text(size=12,angle=90,vjust=.5))+
theme(axis.title.y = element_text(face="bold", size=15), axis.text.y  = element_text(size=12))+
theme(strip.text.x = element_text(size=12, face="bold"))+
theme(plot.title = element_text(lineheight=.8, face="bold", size=14))
png(filename="GCAModels.png",width=900,height=524)
ggplot(GCAModels, aes(x=time2, y=`Fixation Probability`, shape=`Interest Area`, color=`Interest Area`)) +
geom_point(size=3) + geom_line(aes(y=Predicted), size=1)+facet_wrap(~Model, nrow=2, ncol=3)+
scale_fill_manual(values=cbPalette)+scale_colour_manual(values=cbPalette)+
ggtitle("Fixation Proportion for Models\n examining Target vs. Competitor")+
theme_bw()+
scale_x_continuous(name="time 200ms after target onset (ms)", breaks=seq(0,900,100), limits=c(0,900))+
theme(legend.text = element_text(size = 12))+
theme(legend.title = element_text(size=12, face="bold"))+
theme(axis.title.x = element_text(face="bold", size=15), axis.text.x  = element_text(size=12,angle=90,vjust=.5))+
theme(axis.title.y = element_text(face="bold", size=15), axis.text.y  = element_text(size=12))+
theme(strip.text.x = element_text(size=12, face="bold"))+
theme(plot.title = element_text(lineheight=.8, face="bold", size=14))
dev.off()
RFModels$time2<-RFModels$time-4100
ggplot(RFModels, aes(x=time2, y=`Fixation Probability`, shape=`Interest Area`, color=`Interest Area`)) +
geom_point(size=3) + geom_line(aes(y=Predicted), size=1)+facet_wrap(~Model, nrow=1, ncol=2)+
scale_fill_manual(values=cbPalette)+scale_colour_manual(values=cbPalette)+
ggtitle("Fixation Proportion for Models\n examining Target vs. Competitor")+
theme_bw()+
scale_x_continuous(name="time 200ms after target onset (ms)", breaks=seq(0,900,100), limits=c(0,900))+
theme(legend.text = element_text(size = 12))+
theme(legend.title = element_text(size=12, face="bold"))+
theme(axis.title.x = element_text(face="bold", size=15), axis.text.x  = element_text(size=12,angle=90,vjust=.5))+
theme(axis.title.y = element_text(face="bold", size=15), axis.text.y  = element_text(size=12))+
theme(strip.text.x = element_text(size=12, face="bold"))+
theme(plot.title = element_text(lineheight=.8, face="bold", size=14))
GCAModels$time2<-GCAModels$time-4100
ggplot(GCAModels, aes(x=time2, y=`Fixation Probability`, shape=`Interest Area`, color=`Interest Area`)) +
geom_point(size=3) + geom_line(aes(y=Predicted), size=1)+facet_wrap(~Model, nrow=2, ncol=3)+
scale_fill_manual(values=cbPalette)+scale_colour_manual(values=cbPalette)+
ggtitle("Fixation Proportion for Models\n examining Target vs. Competitor")+
theme_bw()+
scale_x_continuous(name="time 200ms after target onset (ms)", breaks=seq(0,900,100), limits=c(0,900))+
theme(legend.text = element_text(size = 12))+
theme(legend.title = element_text(size=12, face="bold"))+
theme(axis.title.x = element_text(face="bold", size=15), axis.text.x  = element_text(size=12,angle=90,vjust=.5))+
theme(axis.title.y = element_text(face="bold", size=15), axis.text.y  = element_text(size=12))+
theme(strip.text.x = element_text(size=12, face="bold"))+
theme(plot.title = element_text(lineheight=.8, face="bold", size=14))
png(filename="GCAModels.png",width=900,height=524)
ggplot(GCAModels, aes(x=time2, y=`Fixation Probability`, shape=`Interest Area`, color=`Interest Area`)) +
geom_point(size=3) + geom_line(aes(y=Predicted), size=1)+facet_wrap(~Model, nrow=2, ncol=3)+
scale_fill_manual(values=cbPalette)+scale_colour_manual(values=cbPalette)+
ggtitle("Fixation Proportion for Models\n examining Target vs. Competitor")+
theme_bw()+
scale_x_continuous(name="time 200ms after target onset (ms)", breaks=seq(0,900,100), limits=c(0,900))+
theme(legend.text = element_text(size = 12))+
theme(legend.title = element_text(size=12, face="bold"))+
theme(axis.title.x = element_text(face="bold", size=15), axis.text.x  = element_text(size=12,angle=90,vjust=.5))+
theme(axis.title.y = element_text(face="bold", size=15), axis.text.y  = element_text(size=12))+
theme(strip.text.x = element_text(size=12, face="bold"))+
theme(plot.title = element_text(lineheight=.8, face="bold", size=14))
dev.off()
RFModels<-ForGraph1 %>% filter(Model=="Random Forest Complex" | Model=="Random Forest Simple")
RFModels$time2<-RFModels$time-4100
ggplot(RFModels, aes(x=time2, y=`Fixation Probability`, shape=`Interest Area`, color=`Interest Area`)) +
geom_point(size=3) + geom_line(aes(y=Predicted), size=1)+facet_wrap(~Model, nrow=1, ncol=2)+
scale_fill_manual(values=cbPalette)+scale_colour_manual(values=cbPalette)+
ggtitle("Fixation Proportion for Models\n examining Target vs. Competitor")+
theme_bw()+
scale_x_continuous(name="time 200ms after target onset (ms)", breaks=seq(0,900,100), limits=c(0,900))+
theme(legend.text = element_text(size = 12))+
theme(legend.title = element_text(size=12, face="bold"))+
theme(axis.title.x = element_text(face="bold", size=15), axis.text.x  = element_text(size=12,angle=90,vjust=.5))+
theme(axis.title.y = element_text(face="bold", size=15), axis.text.y  = element_text(size=12))+
theme(strip.text.x = element_text(size=12, face="bold"))+
theme(plot.title = element_text(lineheight=.8, face="bold", size=14))
png(filename="RFModels.png",width=900,height=524)
ggplot(RFModels, aes(x=time2, y=`Fixation Probability`, shape=`Interest Area`, color=`Interest Area`)) +
geom_point(size=3) + geom_line(aes(y=Predicted), size=1)+facet_wrap(~Model, nrow=1, ncol=2)+
scale_fill_manual(values=cbPalette)+scale_colour_manual(values=cbPalette)+
ggtitle("Fixation Proportion for Models\n examining Target vs. Competitor")+
theme_bw()+
scale_x_continuous(name="time 200ms after target onset (ms)", breaks=seq(0,900,100), limits=c(0,900))+
theme(legend.text = element_text(size = 12))+
theme(legend.title = element_text(size=12, face="bold"))+
theme(axis.title.x = element_text(face="bold", size=15), axis.text.x  = element_text(size=12,angle=90,vjust=.5))+
theme(axis.title.y = element_text(face="bold", size=15), axis.text.y  = element_text(size=12))+
theme(strip.text.x = element_text(size=12, face="bold"))+
theme(plot.title = element_text(lineheight=.8, face="bold", size=14))
dev.off()
ModelLong<- modelData %>% gather(Model,Predictions,11:17)
#rename the models so that they are more clear
levels(ModelLong$Model) <- list(`Model 1 Intercept`="Model1Fitted", `Model 2 Linear`="Model2Fitted", `Model 3 Quadratic`="Model3Fitted", `Model 4 Cubic`="Model4Fitted", `Model 5 Quartic`="Model5Fitted",`Random Forest Complex`="RF1",`Random Forest Simple`="RF2")
colnames(ModelLong)[4]<-"Interest Area"
#rename some of the colums
ModelLong[,4]<-factor(ModelLong[,4])
#compress the data(find the average over subjects)
ForGraph2<-ModelLong %>% group_by(`Interest Area`,time, Model) %>%
summarise(`Fixation Probability`=mean(Prob),Predicted=mean(Predictions))
GCAModels<-ForGraph2 %>% filter(Model!="Random Forest Complex" & Model!="Random Forest Simple")
GCAModels$time2<-GCAModels$time-4100
ggplot(GCAModels, aes(x=time2, y=`Fixation Probability`, shape=`Interest Area`, color=`Interest Area`)) +
geom_point(size=3) + geom_line(aes(y=Predicted), size=1)+facet_wrap(~Model, nrow=2, ncol=3)+
scale_fill_manual(values=cbPalette)+scale_colour_manual(values=cbPalette)+
ggtitle("Fixation Proportion for Models\n examining Competitor vs. Distractors")+
theme_bw()+
scale_x_continuous(name="time 200ms after display onset(ms)", breaks=seq(0,900,100), limits=c(0,900))+
scale_y_continuous(limits=c(0,.3))+
theme(legend.text = element_text(size = 12))+
theme(legend.title = element_text(size=12, face="bold"))+
theme(axis.title.x = element_text(face="bold", size=15), axis.text.x  = element_text(size=12,angle=90,vjust=.5))+
theme(axis.title.y = element_text(face="bold", size=15), axis.text.y  = element_text(size=12))+
theme(strip.text.x = element_text(size=12, face="bold"))+
theme(plot.title = element_text(lineheight=.8, face="bold", size=14))
GCAModels<-ForGraph2 %>% filter(Model!="Random Forest Complex" & Model!="Random Forest Simple")
GCAModels$time2<-GCAModels$time-4100
png(filename="GCAModelsCvsD.png",width=900,height=524)
ggplot(GCAModels, aes(x=time2, y=`Fixation Probability`, shape=`Interest Area`, color=`Interest Area`)) +
geom_point(size=3) + geom_line(aes(y=Predicted), size=1)+facet_wrap(~Model, nrow=2, ncol=3)+
scale_fill_manual(values=cbPalette)+scale_colour_manual(values=cbPalette)+
ggtitle("Fixation Proportion for Models\n examining Competitor vs. Distractors")+
theme_bw()+
scale_x_continuous(name="time 200ms after spoken target onset(ms)", breaks=seq(0,900,100), limits=c(0,900))+
scale_y_continuous(limits=c(0,.3))+
theme(legend.text = element_text(size = 12))+
theme(legend.title = element_text(size=12, face="bold"))+
theme(axis.title.x = element_text(face="bold", size=15), axis.text.x  = element_text(size=12,angle=90,vjust=.5))+
theme(axis.title.y = element_text(face="bold", size=15), axis.text.y  = element_text(size=12))+
theme(strip.text.x = element_text(size=12, face="bold"))+
theme(plot.title = element_text(lineheight=.8, face="bold", size=14))
dev.off()
RFModels<-ForGraph2 %>% filter(Model=="Random Forest Complex" | Model=="Random Forest Simple")
RFModels$time2<-RFModels$time-4100
png(filename="RFModelsCvsD.png",width=900,height=524)
ggplot(RFModels, aes(x=time2, y=`Fixation Probability`, shape=`Interest Area`, color=`Interest Area`)) +
geom_point(size=3) + geom_line(aes(y=Predicted), size=1)+facet_wrap(~Model, nrow=1, ncol=2)+
scale_fill_manual(values=cbPalette)+scale_colour_manual(values=cbPalette)+
ggtitle("Fixation Proportion for Models\n examining Competitor vs. Distractors")+
theme_bw()+
scale_x_continuous(name="time 200ms after spoken target onset(ms)", breaks=seq(0,900,100), limits=c(0,900))+
scale_y_continuous(limits=c(0,.3))+
theme(legend.text = element_text(size = 12))+
theme(legend.title = element_text(size=12, face="bold"))+
theme(axis.title.x = element_text(face="bold", size=15), axis.text.x  = element_text(size=12,angle=90,vjust=.5))+
theme(axis.title.y = element_text(face="bold", size=15), axis.text.y  = element_text(size=12))+
theme(strip.text.x = element_text(size=12, face="bold"))+
theme(plot.title = element_text(lineheight=.8, face="bold", size=14))
dev.off()
setwd("C:/Users/Stas/Dropbox/Dissertation Proposal/Analyses/Exp5/Group1")
EyeData <- read.csv("Exp5G1DriftCorrected.csv", na.strings = c("."))[,c('RECORDING_SESSION_LABEL', 'IA_FIRST_RUN_START_TIME', 'IA_FIRST_RUN_START_TIME', 'IA_FIRST_RUN_END_TIME', 'IA_SECOND_RUN_START_TIME', 'IA_SECOND_RUN_END_TIME', 'IA_THIRD_RUN_START_TIME', 'IA_THIRD_RUN_END_TIME', 'IA_LABEL', 'RESPONSE_ACC', 'IA_DWELL_TIME', 'TRIAL_INDEX', 'target', 'RESPONSE_RT', 'trialtype','Bilingual')]
EyeData[is.na(EyeData)] <- 0
colnames(EyeData)[1] <- "Subject"
setwd("C:/Users/Stas/Dropbox/Dissertation Proposal/Analyses/Exp5/Group1")
EyeData <- subset(EyeData, EyeData$trialtype!="Practice")
CorrectEyeData<-EyeData %>% filter(RESPONSE_ACC==1)
CorrectEyeData$Fststart <- ifelse(as.numeric(as.character(CorrectEyeData$IA_FIRST_RUN_START_TIME)) > 0, as.numeric(as.character(CorrectEyeData$IA_FIRST_RUN_START_TIME)), 0)
CorrectEyeData$Fstend <- ifelse(as.numeric(as.character(CorrectEyeData$IA_FIRST_RUN_START_TIME)) > 0, as.numeric(as.character(CorrectEyeData$IA_FIRST_RUN_END_TIME)), 0)
CorrectEyeData$Secstart <- ifelse(as.numeric(as.character(CorrectEyeData$IA_SECOND_RUN_START_TIME)) > 0, as.numeric(as.character(CorrectEyeData$IA_SECOND_RUN_START_TIME)), 0)
CorrectEyeData$Secend <- ifelse(as.numeric(as.character(CorrectEyeData$IA_SECOND_RUN_START_TIME)) > 0, as.numeric(as.character(CorrectEyeData$IA_SECOND_RUN_END_TIME)), 0)
CorrectEyeData$Thirdstart <- ifelse(as.numeric(as.character(CorrectEyeData$IA_THIRD_RUN_START_TIME)) > 0, as.numeric(as.character(CorrectEyeData$IA_THIRD_RUN_START_TIME)), 0)
CorrectEyeData$Thirdend <- ifelse(as.numeric(as.character(CorrectEyeData$IA_THIRD_RUN_START_TIME)) > 0, as.numeric(as.character(CorrectEyeData$IA_THIRD_RUN_END_TIME)), 0)
time <- seq(0, 6000, by=25)
tmatrix <- matrix(nrow=nrow(CorrectEyeData), ncol=length(time))
dim(tmatrix)
for(i in 1:nrow(tmatrix)) {
for(j in 1:length(time)) {
tmatrix[i,j] <-  ifelse(CorrectEyeData$Fststart[i] < time[j] &
CorrectEyeData$Fstend[i] > time[j] |CorrectEyeData$Secstart[i] <
time[j] & CorrectEyeData$Secend[i] > time[j] | CorrectEyeData$Thirdstart[i]
< time[j] & CorrectEyeData$Thirdend[i]>time[j], 1,0)
}
}
CleanData <- cbind(CorrectEyeData, data.frame(tmatrix))
colnames(CleanData)[23:263] <- seq(0, 6000, by=25)
CleanData <- CleanData[, -c(2:8,10,11,17:22)]
CleanData<- CleanData %>% gather(time,value,8:248)
#find proportion for each interest area for each subject
CleanDataProb<-CleanData %>% group_by(Subject,Bilingual,IA_LABEL,trialtype,time) %>%
summarise(Prob=mean(value))
CleanDataProb$time<-as.numeric(as.character(CleanDataProb$time))
OnlySubjects<-CleanData %>% group_by(IA_LABEL,trialtype,time) %>%
summarise(n=n(),Prob=mean(value),sd=sd(value)) %>%
mutate(se=sd/sqrt(n), LCI=Prob+qnorm(0.025)*se, UCI=Prob+qnorm(0.975)*se)
OnlySubjects$time<-as.numeric(as.character(OnlySubjects$time))
levels(OnlySubjects$IA_LABEL) <- list(Target="TARGET_IA ", Competitor="COMPET_IA ", Distractor1="UNREL1_IA ", Distractor2="UNREL2_IA ", Distractor3="UNREL3_IA ", Distractor4="UNREL4_IA ")
colnames(OnlySubjects)[1]<-"Interest Area"
OnlySubjects<-CleanData %>% group_by(IA_LABEL,trialtype,time) %>%
summarise(n=n(),Prob=mean(value),sd=sd(value)) %>%
mutate(se=sd/sqrt(n), LCI=Prob+qnorm(0.025)*se, UCI=Prob+qnorm(0.975)*se)
OnlySubjects$time<-as.numeric(as.character(OnlySubjects$time))
levels(OnlySubjects$IA_LABEL) <- list(Target="TARGET_IA ", Competitor="COMPET_IA ", Distractor1="UNREL1_IA ", Distractor2="UNREL2_IA ", Distractor3="UNREL3_IA ", Distractor4="UNREL4_IA ")
colnames(OnlySubjects)[1]<-"Interest Area"
model<-CleanDataProb %>%
filter(trialtype=="Experimental", IA_LABEL=="COMPET_IA " | IA_LABEL=="TARGET_IA ",
time>=4100 & time <=5000)
model$IA_LABEL<-as.factor(as.character(model$IA_LABEL))
#Generate time polynomials up to quadratic poly.
t25 <- data.frame(poly(unique(model$time),4))
t25$time <- seq(4100, 5000, by=25)
#add polynomials to data frame
model <- merge(model , t25, by="time")
head(model)
str(model)
levels(CleanData$IA_LABEL) <- list(Distractor="UNREL1_IA ", Distractor="UNREL2_IA ",Competitor="COMPET_IA ", Target="Target_IA ",Distractor="UNREL3_IA ",Distractor="UNREL4_IA ")
CleanDataProb2<-CleanData %>% group_by(Subject,Bilingual,IA_LABEL,trialtype,time) %>%
summarise(Prob=mean(value))
CleanDataProb2$time<-as.numeric(as.character(CleanDataProb2$time))
modelData<-CleanDataProb2 %>%
filter(trialtype=="Experimental", IA_LABEL=="Competitor" | IA_LABEL=="Distractor",
time>=4100 & time <=5000)
modelData$IA_LABEL<-as.factor(as.character(modelData$IA_LABEL))
#Generate time polynomials up to quadratic poly.
t25 <- data.frame(poly(unique(modelData$time),4))
t25$time <- seq(4100, 5000, by=25)
#add polynomials to data frame
modelData <- merge(modelData , t25, by="time")
head(modelData)
str(modelData)
Model1<-lmer(Prob ~ IA_LABEL +
(1| Subject) +
(1| Subject:IA_LABEL),
data=modelData, REML=T)
#linear; model 2
Model2<-lmer(Prob ~ IA_LABEL*X1 +
(1+X1| Subject) +
(1+X1| Subject:IA_LABEL),
data=modelData, REML=T)
Model3<-lmer(Prob ~ IA_LABEL*(X1+X2) +
(1+X1+X2| Subject) +
#linea+quadratic; model 3
data=modelData, REML=T)
(1+X1+X2| Subject:IA_LABEL),
#Model 4
Model4<-lmer(Prob ~ IA_LABEL*(X1+X2) +
(1+X1| Subject) +
(1| Subject:IA_LABEL),
data=modelData, REML=T)
#Model 5
Model5<-lmer(Prob ~ IA_LABEL*(X1+X2) +
(1| Subject) +
(1+X1| Subject:IA_LABEL),
data=modelData, REML=T)
modelData$Model1Fitted<-fitted(Model1)
modelData$Model2Fitted<-fitted(Model2)
modelData$Model3Fitted<-fitted(Model3)
modelData$Model4Fitted<-fitted(Model4)
modelData$Model5Fitted<-fitted(Model5)
Model1<-lmer(Prob ~ IA_LABEL +
(1| Subject) +
(1| Subject:IA_LABEL),
data=modelData, REML=T)
#linear; model 2
Model2<-lmer(Prob ~ IA_LABEL*X1 +
(1+X1| Subject) +
(1+X1| Subject:IA_LABEL),
data=modelData, REML=T)
#linea+quadratic; model 3
Model3<-lmer(Prob ~ IA_LABEL*(X1+X2) +
(1+X1+X2| Subject) +
(1+X1+X2| Subject:IA_LABEL),
data=modelData, REML=T)
#Model 4
Model4<-lmer(Prob ~ IA_LABEL*(X1+X2) +
(1+X1| Subject) +
(1| Subject:IA_LABEL),
data=modelData, REML=T)
#Model 5
Model5<-lmer(Prob ~ IA_LABEL*(X1+X2) +
(1| Subject) +
(1+X1| Subject:IA_LABEL),
data=modelData, REML=T)
modelData$Model1Fitted<-fitted(Model1)
modelData$Model2Fitted<-fitted(Model2)
modelData$Model3Fitted<-fitted(Model3)
modelData$Model4Fitted<-fitted(Model4)
modelData$Model5Fitted<-fitted(Model5)
set.seed(123)
modelRF1<-train(Prob~(X1+X2+X3+X4)*IA_LABEL+Subject, method="rf", data=modelData,
trControl = trainControl(method = "cv", number = 5),
ntree = 200, importance = TRUE)
#Examine Model Ouput
modelData$RF1<-modelRF1$finalModel$predicted
set.seed(123)
modelRF2<-train(Prob~(X1)*IA_LABEL+Subject, method="rf", data=modelData,
trControl = trainControl(method = "cv", number = 5),
ntree = 200, importance = TRUE)
modelData$RF2<-modelRF2$finalModel$predicted
ModelLong<- modelData %>% gather(Model,Predictions,11:17)
#rename the models so that they are more clear
levels(ModelLong$Model) <- list(`Model 1 Intercept`="Model1Fitted", `Model 2 Linear`="Model2Fitted", `Model 3 Quadratic (not converged)`="Model3Fitted", `Model 4 Quadratic (not converged)`="Model4Fitted", `Model 5 Quadratic`="Model5Fitted",`Random Forest Complex`="RF1",`Random Forest Simple`="RF2")
#rename some of the colums
colnames(ModelLong)[4]<-"Interest Area"
ModelLong[,4]<-factor(ModelLong[,4])
#compress the data(find the average over subjects)
ForGraph2<-ModelLong %>% group_by(`Interest Area`,time, Model) %>%
summarise(`Fixation Probability`=mean(Prob),Predicted=mean(Predictions))
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
GCAModels<-ForGraph2 %>% filter(Model!="Random Forest Complex" & Model!="Random Forest Simple")
GCAModels$time2<-GCAModels$time-4100
ggplot(GCAModels, aes(x=time2, y=`Fixation Probability`, shape=`Interest Area`, color=`Interest Area`)) +
geom_point(size=3) + geom_line(aes(y=Predicted), size=1)+facet_wrap(~Model, nrow=2, ncol=3)+
scale_fill_manual(values=cbPalette)+scale_colour_manual(values=cbPalette)+
ggtitle("Fixation Proportion for Models\n examining Competitor vs. Distractors")+
theme_bw()+
scale_x_continuous(name="time 200ms after spoken target onset (ms)", breaks=seq(0,900,100), limits=c(0,900))+
scale_y_continuous(limits=c(0,.3))+
theme(legend.text = element_text(size = 12))+
theme(legend.title = element_text(size=12, face="bold"))+
theme(axis.title.x = element_text(face="bold", size=15), axis.text.x  = element_text(size=12,angle=90,vjust=.5))+
theme(axis.title.y = element_text(face="bold", size=15), axis.text.y  = element_text(size=12))+
theme(strip.text.x = element_text(size=12, face="bold"))+
theme(plot.title = element_text(lineheight=.8, face="bold", size=14))
png(filename="GCAModelsCvsD.png",width=900,height=524)
ggplot(GCAModels, aes(x=time2, y=`Fixation Probability`, shape=`Interest Area`, color=`Interest Area`)) +
geom_point(size=3) + geom_line(aes(y=Predicted), size=1)+facet_wrap(~Model, nrow=2, ncol=3)+
scale_fill_manual(values=cbPalette)+scale_colour_manual(values=cbPalette)+
ggtitle("Fixation Proportion for Models\n examining Competitor vs. Distractors")+
theme_bw()+
scale_x_continuous(name="time 200ms after spoken target onset (ms)", breaks=seq(0,900,100), limits=c(0,900))+
scale_y_continuous(limits=c(0,.3))+
theme(legend.text = element_text(size = 12))+
theme(legend.title = element_text(size=12, face="bold"))+
theme(axis.title.x = element_text(face="bold", size=15), axis.text.x  = element_text(size=12,angle=90,vjust=.5))+
theme(axis.title.y = element_text(face="bold", size=15), axis.text.y  = element_text(size=12))+
theme(strip.text.x = element_text(size=12, face="bold"))+
theme(plot.title = element_text(lineheight=.8, face="bold", size=14))
dev.off()
RFModels<-ForGraph2 %>% filter(Model=="Random Forest Complex" | Model=="Random Forest Simple")
RFModels$time2<-RFModels$time-4100
png(filename="RFModelsCvsD.png",width=900,height=524)
ggplot(RFModels, aes(x=time2, y=`Fixation Probability`, shape=`Interest Area`, color=`Interest Area`)) +
geom_point(size=3) + geom_line(aes(y=Predicted), size=1)+facet_wrap(~Model, nrow=1, ncol=2)+
scale_fill_manual(values=cbPalette)+scale_colour_manual(values=cbPalette)+
ggtitle("Fixation Proportion for Models\n examining Competitor vs. Distractors")+
theme_bw()+
scale_x_continuous(name="time 200ms after spoken target onset(ms)", breaks=seq(0,900,100), limits=c(0,900))+
scale_y_continuous(limits=c(0,.3))+
theme(legend.text = element_text(size = 12))+
theme(legend.title = element_text(size=12, face="bold"))+
theme(axis.title.x = element_text(face="bold", size=15), axis.text.x  = element_text(size=12,angle=90,vjust=.5))+
theme(axis.title.y = element_text(face="bold", size=15), axis.text.y  = element_text(size=12))+
theme(strip.text.x = element_text(size=12, face="bold"))+
theme(plot.title = element_text(lineheight=.8, face="bold", size=14))
dev.off()
library(ggplot2)
library(lme4)
library(lmerTest)
library(dplyr)
library(parallel)
library(doParallel)
library(tidyr)
library(gridExtra)
library(caret)
library(multcomp)
setwd("C:/Users/Stas/Dropbox/Dissertation Proposal/Analyses/Exp4")
EyeData <- read.csv("Exp4DriftCorrectedVersion2.csv", na.strings = c("."))[,c('RECORDING_SESSION_LABEL', 'IA_FIRST_RUN_START_TIME', 'IA_FIRST_RUN_START_TIME', 'IA_FIRST_RUN_END_TIME', 'IA_SECOND_RUN_START_TIME', 'IA_SECOND_RUN_END_TIME', 'IA_THIRD_RUN_START_TIME', 'IA_THIRD_RUN_END_TIME', 'IA_LABEL', 'RESPONSE_ACC', 'IA_DWELL_TIME', 'TRIAL_INDEX', 'target', 'RESPONSE_RT', 'trialtype','Bilingual','list','colorcompetitor', 'colorofblock')]
EyeData[is.na(EyeData)] <- 0
#check the dimentions of the dataset
dim(EyeData)
colnames(EyeData)[1] <- "Subject"
#rename the RECORDING_SESSION_LABEL into Subject
#examine colum names
names(EyeData)
str(EyeData)
EyeData <- subset(EyeData, EyeData$trialtype!="Practice")
SubjectAccuracy<- EyeData %>% group_by(Subject) %>%
summarise(MeanAccuracy=mean(RESPONSE_ACC)) %>% arrange(MeanAccuracy)
SubjectAccuracy
mean(SubjectAccuracy$MeanAccuracy)
SubjectRT<- EyeData %>% group_by(Subject) %>%
summarise(MeanRT=mean(RESPONSE_RT)) %>% arrange(MeanRT)
SubjectRT
mean(SubjectRT$MeanRT)
EyeData %>% group_by(colorcompetitor) %>%
summarise(MeanAccuracy=mean(RESPONSE_ACC)) %>% arrange(MeanAccuracy)
CorrectEyeData<-EyeData %>% filter(RESPONSE_ACC==1)
#examine trials by congruency
CongruencyRT<- CorrectEyeData %>% filter(trialtype=="Experimental") %>% group_by(colorcompetitor) %>%
summarise(MeanRT=mean(RESPONSE_RT)) %>% arrange(MeanRT)
EyeData %>% filter(trialtype=="Experimental") %>% group_by(colorcompetitor) %>%
summarise(MeanAccuracy=mean(RESPONSE_ACC)) %>% arrange(MeanAccuracy)
EyeData %>% group_by(trialtype, colorcompetitor) %>%
summarise(MeanAccuracy=mean(RESPONSE_ACC)) %>% arrange(MeanAccuracy)
10800-10676
124/4
filter(RESPONSE_ACC==1 & trialtype=="Experimental")
EyeData %>% filter(RESPONSE_ACC==1 & trialtype=="Experimental")
EyeData %>% filter(RESPONSE_ACC==0 & trialtype=="Experimental")
